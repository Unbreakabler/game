import { SvelteComponent, init, safe_not_equal, element, append, create_component, mount_component, transition_in, transition_out, destroy_component, space, text, empty, attr, insert, set_data, group_outros, check_outros, detach, noop } from '../../node_modules/svelte/internal/index.mjs.js';
import Button from '../../node_modules/smelte/src/components/Button/Button.svelte.js';
import Mines from '../app/mines.svelte.js';
import Modal from './modal.svelte.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import { saveToStorage, resetSaveGame } from '../gamelogic/util/saveloadfunctions.js';

/* src/components/menu.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1p22b5l-style";
	style.textContent = ".menu.svelte-1p22b5l{flex:1;padding:2px;display:flex;flex-direction:column;justify-content:space-between}.actions.svelte-1p22b5l{display:flex;flex-direction:column}.time-controls.svelte-1p22b5l{display:flex;flex-direction:row;justify-content:space-between;align-items:center}.settings.svelte-1p22b5l{display:flex;flex-direction:column}";
	append(document.head, style);
}

// (26:4) <Button on:click={() => showModal = 'mine'}>
function create_default_slot_8(ctx) {
	let t;

	return {
		c() {
			t = text("MINE");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (27:4) <Button on:click={() => showModal = 'inventory'}>
function create_default_slot_7(ctx) {
	let t;

	return {
		c() {
			t = text("INVENTORY");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (28:4) <Button>
function create_default_slot_6(ctx) {
	let t;

	return {
		c() {
			t = text("DPS METER");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (29:4) <Button color="secondary" on:click={() => showModal = 'settings'}>
function create_default_slot_5(ctx) {
	let t;

	return {
		c() {
			t = text("SETTINGS");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (32:4) <Button on:click={() => updateTimestep(-1)} >
function create_default_slot_4(ctx) {
	let t;

	return {
		c() {
			t = text("dec");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (34:4) <Button on:click={() => updateTimestep(1)}>
function create_default_slot_3(ctx) {
	let t;

	return {
		c() {
			t = text("inc");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (37:0) {#if showModal}
function create_if_block(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	modal.$on("close", /*close_handler*/ ctx[10]);

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modal_changes = {};

			if (dirty & /*$$scope, showModal*/ 2050) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (44:39) 
function create_if_block_3(ctx) {
	let div;
	let h4;
	let t1;
	let button0;
	let t2;
	let button1;
	let current;

	button0 = new Button({
			props: {
				color: "secondary",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*saveGame*/ ctx[3]);

	button1 = new Button({
			props: {
				color: "secondary",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*hardReset*/ ctx[4]);

	return {
		c() {
			div = element("div");
			h4 = element("h4");
			h4.textContent = "Settings:";
			t1 = space();
			create_component(button0.$$.fragment);
			t2 = space();
			create_component(button1.$$.fragment);
			attr(div, "class", "settings svelte-1p22b5l");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h4);
			append(div, t1);
			mount_component(button0, div, null);
			append(div, t2);
			mount_component(button1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

// (41:40) 
function create_if_block_2(ctx) {
	let t;

	return {
		c() {
			t = text("INVENTORY OR SOMETHING");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (39:4) {#if showModal === 'mine'}
function create_if_block_1(ctx) {
	let mines;
	let current;
	mines = new Mines({});

	return {
		c() {
			create_component(mines.$$.fragment);
		},
		m(target, anchor) {
			mount_component(mines, target, anchor);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(mines.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(mines.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(mines, detaching);
		}
	};
}

// (47:8) <Button color="secondary" on:click={saveGame}>
function create_default_slot_2(ctx) {
	let t;

	return {
		c() {
			t = text("Save");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (48:8) <Button color="secondary" on:click={hardReset}>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Hard Reset");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (38:2) <Modal on:close={() => showModal = null}>
function create_default_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_2, create_if_block_3];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*showModal*/ ctx[1] === "mine") return 0;
		if (/*showModal*/ ctx[1] === "inventory") return 1;
		if (/*showModal*/ ctx[1] === "settings") return 2;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let button0;
	let t0;
	let button1;
	let t1;
	let button2;
	let t2;
	let button3;
	let t3;
	let div2;
	let button4;
	let t4;
	let div1;
	let t5_value = /*gameModelInstance*/ ctx[0].tower_defense.time_multiplier + "";
	let t5;
	let t6;
	let t7;
	let button5;
	let t8;
	let if_block_anchor;
	let current;

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*click_handler*/ ctx[5]);

	button1 = new Button({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*click_handler_1*/ ctx[6]);

	button2 = new Button({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	button3 = new Button({
			props: {
				color: "secondary",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	button3.$on("click", /*click_handler_2*/ ctx[7]);

	button4 = new Button({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	button4.$on("click", /*click_handler_3*/ ctx[8]);

	button5 = new Button({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	button5.$on("click", /*click_handler_4*/ ctx[9]);
	let if_block = /*showModal*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			create_component(button0.$$.fragment);
			t0 = space();
			create_component(button1.$$.fragment);
			t1 = space();
			create_component(button2.$$.fragment);
			t2 = space();
			create_component(button3.$$.fragment);
			t3 = space();
			div2 = element("div");
			create_component(button4.$$.fragment);
			t4 = space();
			div1 = element("div");
			t5 = text(t5_value);
			t6 = text("x");
			t7 = space();
			create_component(button5.$$.fragment);
			t8 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div0, "class", "actions svelte-1p22b5l");
			attr(div2, "class", "time-controls svelte-1p22b5l");
			attr(div3, "class", "menu svelte-1p22b5l");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			mount_component(button0, div0, null);
			append(div0, t0);
			mount_component(button1, div0, null);
			append(div0, t1);
			mount_component(button2, div0, null);
			append(div0, t2);
			mount_component(button3, div0, null);
			append(div3, t3);
			append(div3, div2);
			mount_component(button4, div2, null);
			append(div2, t4);
			append(div2, div1);
			append(div1, t5);
			append(div1, t6);
			append(div2, t7);
			mount_component(button5, div2, null);
			insert(target, t8, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);
			const button4_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button4_changes.$$scope = { dirty, ctx };
			}

			button4.$set(button4_changes);
			if ((!current || dirty & /*gameModelInstance*/ 1) && t5_value !== (t5_value = /*gameModelInstance*/ ctx[0].tower_defense.time_multiplier + "")) set_data(t5, t5_value);
			const button5_changes = {};

			if (dirty & /*$$scope*/ 2048) {
				button5_changes.$$scope = { dirty, ctx };
			}

			button5.$set(button5_changes);

			if (/*showModal*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showModal*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(button4.$$.fragment, local);
			transition_in(button5.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(button4.$$.fragment, local);
			transition_out(button5.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(button3);
			destroy_component(button4);
			destroy_component(button5);
			if (detaching) detach(t8);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(0, gameModelInstance = m));

	const updateTimestep = delta => {
		$$invalidate(0, gameModelInstance.tower_defense.time_multiplier += delta, gameModelInstance);
		$$invalidate(0, gameModelInstance.tower_defense.time_multiplier = Math.min(Math.max(gameModelInstance.tower_defense.time_multiplier, 0), 100), gameModelInstance);
	};

	let showModal = null;

	const saveGame = () => {
		saveToStorage(gameModelInstance);
	};

	const hardReset = () => {
		if (window.confirm("You will lose all progress. Are you sure?")) {
			resetSaveGame();
			saveGame();
		}
	};

	const click_handler = () => $$invalidate(1, showModal = "mine");
	const click_handler_1 = () => $$invalidate(1, showModal = "inventory");
	const click_handler_2 = () => $$invalidate(1, showModal = "settings");
	const click_handler_3 = () => updateTimestep(-1);
	const click_handler_4 = () => updateTimestep(1);
	const close_handler = () => $$invalidate(1, showModal = null);

	return [
		gameModelInstance,
		showModal,
		updateTimestep,
		saveGame,
		hardReset,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		close_handler
	];
}

class Menu extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1p22b5l-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Menu;
//# sourceMappingURL=menu.svelte.js.map
