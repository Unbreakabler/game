import { SvelteComponent, init, safe_not_equal, update_slot, transition_in, transition_out, create_component, mount_component, destroy_component, create_slot, element, space, attr, insert, append, group_outros, check_outros, detach, destroy_each, onMount, assign, exclude_internal_props, get_spread_update, get_spread_object, add_flush_callback, binding_callbacks, bind, text, set_data } from '../../../../svelte/internal/index.mjs.js';
import { ClassBuilder } from '../../utils/classes.js';
import Indicator from './Indicator.svelte.js';
import ProgressLinear from '../ProgressLinear/ProgressLinear.svelte.js';
import TabButton from './TabButton.svelte.js';

/* node_modules/smelte/src/components/Tabs/Tabs.svelte generated by Svelte v3.32.1 */
const get_content_slot_changes = dirty => ({ selected: dirty & /*selected*/ 1 });
const get_content_slot_context = ctx => ({ selected: /*selected*/ ctx[0] });

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	child_ctx[22] = i;
	return child_ctx;
}

const get_item_slot_changes = dirty => ({
	color: dirty & /*color*/ 8,
	item: dirty & /*items*/ 2
});

const get_item_slot_context = ctx => ({
	color: /*color*/ ctx[3],
	item: /*item*/ ctx[20]
});

// (69:6) <TabButton         class={tabButtonClasses}         bind:selected         {...item}         {color}         {notSelectedColor}       >
function create_default_slot(ctx) {
	let t_value = /*item*/ ctx[20].text + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*items*/ 2 && t_value !== (t_value = /*item*/ ctx[20].text + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (68:37)        
function fallback_block(ctx) {
	let tabbutton;
	let updating_selected;
	let current;

	const tabbutton_spread_levels = [
		{ class: /*tabButtonClasses*/ ctx[6] },
		/*item*/ ctx[20],
		{ color: /*color*/ ctx[3] },
		{
			notSelectedColor: /*notSelectedColor*/ ctx[4]
		}
	];

	function tabbutton_selected_binding(value) {
		/*tabbutton_selected_binding*/ ctx[14].call(null, value);
	}

	let tabbutton_props = {
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	for (let i = 0; i < tabbutton_spread_levels.length; i += 1) {
		tabbutton_props = assign(tabbutton_props, tabbutton_spread_levels[i]);
	}

	if (/*selected*/ ctx[0] !== void 0) {
		tabbutton_props.selected = /*selected*/ ctx[0];
	}

	tabbutton = new TabButton({ props: tabbutton_props });
	binding_callbacks.push(() => bind(tabbutton, "selected", tabbutton_selected_binding));

	return {
		c() {
			create_component(tabbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tabbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tabbutton_changes = (dirty & /*tabButtonClasses, items, color, notSelectedColor*/ 90)
			? get_spread_update(tabbutton_spread_levels, [
					dirty & /*tabButtonClasses*/ 64 && { class: /*tabButtonClasses*/ ctx[6] },
					dirty & /*items*/ 2 && get_spread_object(/*item*/ ctx[20]),
					dirty & /*color*/ 8 && { color: /*color*/ ctx[3] },
					dirty & /*notSelectedColor*/ 16 && {
						notSelectedColor: /*notSelectedColor*/ ctx[4]
					}
				])
			: {};

			if (dirty & /*$$scope, items*/ 65538) {
				tabbutton_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*selected*/ 1) {
				updating_selected = true;
				tabbutton_changes.selected = /*selected*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			tabbutton.$set(tabbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tabbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tabbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tabbutton, detaching);
		}
	};
}

// (67:2) {#each items as item, i}
function create_each_block(ctx) {
	let current;
	const item_slot_template = /*#slots*/ ctx[13].item;
	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[16], get_item_slot_context);
	const item_slot_or_fallback = item_slot || fallback_block(ctx);

	return {
		c() {
			if (item_slot_or_fallback) item_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (item_slot_or_fallback) {
				item_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (item_slot) {
				if (item_slot.p && dirty & /*$$scope, color, items*/ 65546) {
					update_slot(item_slot, item_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_item_slot_changes, get_item_slot_context);
				}
			} else {
				if (item_slot_or_fallback && item_slot_or_fallback.p && dirty & /*tabButtonClasses, items, color, notSelectedColor, selected*/ 91) {
					item_slot_or_fallback.p(ctx, dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(item_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(item_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
		}
	};
}

// (78:2) {#if indicator && offset !== null}
function create_if_block_1(ctx) {
	let indicator_1;
	let current;

	indicator_1 = new Indicator({
			props: {
				color: /*color*/ ctx[3],
				width: /*indicatorWidth*/ ctx[8],
				left: /*offset*/ ctx[9]
			}
		});

	return {
		c() {
			create_component(indicator_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(indicator_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const indicator_1_changes = {};
			if (dirty & /*color*/ 8) indicator_1_changes.color = /*color*/ ctx[3];
			if (dirty & /*indicatorWidth*/ 256) indicator_1_changes.width = /*indicatorWidth*/ ctx[8];
			if (dirty & /*offset*/ 512) indicator_1_changes.left = /*offset*/ ctx[9];
			indicator_1.$set(indicator_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(indicator_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(indicator_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(indicator_1, detaching);
		}
	};
}

// (82:0) {#if loading}
function create_if_block(ctx) {
	let progresslinear;
	let current;
	progresslinear = new ProgressLinear({ props: { color: /*color*/ ctx[3] } });

	return {
		c() {
			create_component(progresslinear.$$.fragment);
		},
		m(target, anchor) {
			mount_component(progresslinear, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const progresslinear_changes = {};
			if (dirty & /*color*/ 8) progresslinear_changes.color = /*color*/ ctx[3];
			progresslinear.$set(progresslinear_changes);
		},
		i(local) {
			if (current) return;
			transition_in(progresslinear.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(progresslinear.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(progresslinear, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let current;
	let each_value = /*items*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block0 = /*indicator*/ ctx[2] && /*offset*/ ctx[9] !== null && create_if_block_1(ctx);
	let if_block1 = /*loading*/ ctx[5] && create_if_block(ctx);
	const content_slot_template = /*#slots*/ ctx[13].content;
	const content_slot = create_slot(content_slot_template, ctx, /*$$scope*/ ctx[16], get_content_slot_context);

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (content_slot) content_slot.c();
			attr(div, "class", /*c*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append(div, t0);
			if (if_block0) if_block0.m(div, null);
			/*div_binding*/ ctx[15](div);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t2, anchor);

			if (content_slot) {
				content_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*tabButtonClasses, items, color, notSelectedColor, selected, $$scope*/ 65627) {
				each_value = /*items*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, t0);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*indicator*/ ctx[2] && /*offset*/ ctx[9] !== null) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*indicator, offset*/ 516) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*c*/ 1024) {
				attr(div, "class", /*c*/ ctx[10]);
			}

			if (/*loading*/ ctx[5]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*loading*/ 32) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (content_slot) {
				if (content_slot.p && dirty & /*$$scope, selected*/ 65537) {
					update_slot(content_slot, content_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_content_slot_changes, get_content_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(content_slot, local);
			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(content_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			/*div_binding*/ ctx[15](null);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t2);
			if (content_slot) content_slot.d(detaching);
		}
	};
}
const classesDefault = "y-0 h-full items-center relative mx-auto z-20";

function instance($$self, $$props, $$invalidate) {
	let c;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { selected = null } = $$props;
	let { navigation = false } = $$props;
	let { items = [] } = $$props;
	let { indicator = true } = $$props;
	let { color = "white" } = $$props;
	let { notSelectedColor = "white" } = $$props;
	let { loading = false } = $$props;
	let { tabButtonClasses = i => i } = $$props;
	let node;
	let indicatorWidth = 0;
	let offset = null;

	function calcIndicator() {
		$$invalidate(8, indicatorWidth = node ? node.offsetWidth / items.length : 0);
		let left = 0;

		if (selected && items.findIndex(i => selected.includes(i.to || i.id)) !== -1) {
			const longestMatch = items.map((item, index) => [index, item]).filter(([index, item]) => selected.includes(item.to || item.id)).sort(([index1, item1], [index2, item2]) => (item2.to || item2.id).length - (item1.to || item1.id).length)[0];

			if (longestMatch) {
				left = longestMatch[0];
				$$invalidate(9, offset = left * indicatorWidth);
			}
		} else {
			$$invalidate(9, offset = null);
		}
	}

	onMount(() => calcIndicator());
	let { classes = classesDefault } = $$props;
	const cb = new ClassBuilder(classes, classesDefault);

	function tabbutton_selected_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			node = $$value;
			$$invalidate(7, node);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(19, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("selected" in $$new_props) $$invalidate(0, selected = $$new_props.selected);
		if ("navigation" in $$new_props) $$invalidate(11, navigation = $$new_props.navigation);
		if ("items" in $$new_props) $$invalidate(1, items = $$new_props.items);
		if ("indicator" in $$new_props) $$invalidate(2, indicator = $$new_props.indicator);
		if ("color" in $$new_props) $$invalidate(3, color = $$new_props.color);
		if ("notSelectedColor" in $$new_props) $$invalidate(4, notSelectedColor = $$new_props.notSelectedColor);
		if ("loading" in $$new_props) $$invalidate(5, loading = $$new_props.loading);
		if ("tabButtonClasses" in $$new_props) $$invalidate(6, tabButtonClasses = $$new_props.tabButtonClasses);
		if ("classes" in $$new_props) $$invalidate(12, classes = $$new_props.classes);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 1) {
			 calcIndicator();
		}

		 $$invalidate(10, c = cb.flush().add($$props.class).add("hidden md:flex w-full max-w-2xl", navigation).add("flex", !navigation).get());
	};

	$$props = exclude_internal_props($$props);

	return [
		selected,
		items,
		indicator,
		color,
		notSelectedColor,
		loading,
		tabButtonClasses,
		node,
		indicatorWidth,
		offset,
		c,
		navigation,
		classes,
		slots,
		tabbutton_selected_binding,
		div_binding,
		$$scope
	];
}

class Tabs extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			selected: 0,
			navigation: 11,
			items: 1,
			indicator: 2,
			color: 3,
			notSelectedColor: 4,
			loading: 5,
			tabButtonClasses: 6,
			classes: 12
		});
	}
}

export default Tabs;
//# sourceMappingURL=Tabs.svelte.js.map
