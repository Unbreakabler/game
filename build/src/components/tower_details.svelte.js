import { SvelteComponent, init, safe_not_equal, element, text, space, attr, insert, append, set_data, detach, empty, noop } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/components/tower_details.svelte generated by Svelte v3.32.1 */

function create_if_block(ctx) {
	let div8;
	let div0;
	let t0;
	let t1_value = /*tower_stats*/ ctx[1].kills.lifetime + /*tower_stats*/ ctx[1].kills.prestige + "";
	let t1;
	let t2;
	let div1;
	let t3;
	let t4_value = /*tower_stats*/ ctx[1].kills.prestige + "";
	let t4;
	let t5;
	let div2;
	let t6;
	let t7_value = /*tower_stats*/ ctx[1].damage.lifetime + /*tower_stats*/ ctx[1].damage.prestige + "";
	let t7;
	let t8;
	let div3;
	let t9;
	let t10_value = /*tower_stats*/ ctx[1].damage.prestige + "";
	let t10;
	let t11;
	let div4;
	let t12_value = /*tower_info*/ ctx[0].type + "";
	let t12;
	let t13;
	let div5;
	let t14;
	let t15;
	let t16;
	let div6;
	let t17;
	let t18_value = /*tower_info*/ ctx[0].damage + "";
	let t18;
	let t19;
	let div7;
	let t20;
	let t21_value = /*tower_info*/ ctx[0].attack_speed / 1000 + "";
	let t21;
	let t22;

	return {
		c() {
			div8 = element("div");
			div0 = element("div");
			t0 = text("lifetime kills: ");
			t1 = text(t1_value);
			t2 = space();
			div1 = element("div");
			t3 = text("prestige kills: ");
			t4 = text(t4_value);
			t5 = space();
			div2 = element("div");
			t6 = text("lifetime damage: ");
			t7 = text(t7_value);
			t8 = space();
			div3 = element("div");
			t9 = text("prestige damage: ");
			t10 = text(t10_value);
			t11 = space();
			div4 = element("div");
			t12 = text(t12_value);
			t13 = space();
			div5 = element("div");
			t14 = text("dps: ");
			t15 = text(/*dps*/ ctx[2]);
			t16 = space();
			div6 = element("div");
			t17 = text("damage per hit: ");
			t18 = text(t18_value);
			t19 = space();
			div7 = element("div");
			t20 = text("attack time: ");
			t21 = text(t21_value);
			t22 = text("s");
			attr(div8, "class", "details svelte-8xie7");
		},
		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div0);
			append(div0, t0);
			append(div0, t1);
			append(div8, t2);
			append(div8, div1);
			append(div1, t3);
			append(div1, t4);
			append(div8, t5);
			append(div8, div2);
			append(div2, t6);
			append(div2, t7);
			append(div8, t8);
			append(div8, div3);
			append(div3, t9);
			append(div3, t10);
			append(div8, t11);
			append(div8, div4);
			append(div4, t12);
			append(div8, t13);
			append(div8, div5);
			append(div5, t14);
			append(div5, t15);
			append(div8, t16);
			append(div8, div6);
			append(div6, t17);
			append(div6, t18);
			append(div8, t19);
			append(div8, div7);
			append(div7, t20);
			append(div7, t21);
			append(div7, t22);
		},
		p(ctx, dirty) {
			if (dirty & /*tower_stats*/ 2 && t1_value !== (t1_value = /*tower_stats*/ ctx[1].kills.lifetime + /*tower_stats*/ ctx[1].kills.prestige + "")) set_data(t1, t1_value);
			if (dirty & /*tower_stats*/ 2 && t4_value !== (t4_value = /*tower_stats*/ ctx[1].kills.prestige + "")) set_data(t4, t4_value);
			if (dirty & /*tower_stats*/ 2 && t7_value !== (t7_value = /*tower_stats*/ ctx[1].damage.lifetime + /*tower_stats*/ ctx[1].damage.prestige + "")) set_data(t7, t7_value);
			if (dirty & /*tower_stats*/ 2 && t10_value !== (t10_value = /*tower_stats*/ ctx[1].damage.prestige + "")) set_data(t10, t10_value);
			if (dirty & /*tower_info*/ 1 && t12_value !== (t12_value = /*tower_info*/ ctx[0].type + "")) set_data(t12, t12_value);
			if (dirty & /*dps*/ 4) set_data(t15, /*dps*/ ctx[2]);
			if (dirty & /*tower_info*/ 1 && t18_value !== (t18_value = /*tower_info*/ ctx[0].damage + "")) set_data(t18, t18_value);
			if (dirty & /*tower_info*/ 1 && t21_value !== (t21_value = /*tower_info*/ ctx[0].attack_speed / 1000 + "")) set_data(t21, t21_value);
		},
		d(detaching) {
			if (detaching) detach(div8);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*tower_info*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*tower_info*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let selection;
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(3, gameModelInstance = m));
	let tower_info = undefined;
	let tower_stats = undefined;
	let dps = 0;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 8) {
			 $$invalidate(4, selection = gameModelInstance.tower_defense.selection);
		}

		if ($$self.$$.dirty & /*selection, gameModelInstance*/ 24) {
			 if (selection) {
				$$invalidate(0, tower_info = gameModelInstance.tower_defense.getTower(selection.id));
			} else {
				$$invalidate(0, tower_info = undefined);
			}
		}

		if ($$self.$$.dirty & /*selection, gameModelInstance*/ 24) {
			 if (selection) {
				$$invalidate(1, tower_stats = gameModelInstance.tower_defense.getTowerStats(selection.id));
			} else {
				$$invalidate(1, tower_stats = undefined);
			}
		}

		if ($$self.$$.dirty & /*tower_info*/ 1) {
			 if (tower_info) {
				$$invalidate(2, dps = tower_info.damage * (1000 / tower_info.attack_speed));
			}
		}
	};

	return [tower_info, tower_stats, dps, gameModelInstance, selection];
}

class Tower_details extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Tower_details;
//# sourceMappingURL=tower_details.svelte.js.map
