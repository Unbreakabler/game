{"version":3,"file":"gameloop.js","sources":["../../../../src/gamelogic/gameloop.ts"],"sourcesContent":["import { gameModel, GameModel, updateGameModel } from \"./gamemodel\";\nimport { sendMessage } from \"./util/notifications\";\nimport { formatWhole } from \"./util/utils\";\nimport { saveToStorage } from \"./util/saveloadfunctions\";\n\n/**\n * Reference to the GameModel.\n * We use the subscribe function so if the store is updated our local instance will also update.\n */\nlet gameModelInstance: GameModel;\ngameModel.subscribe((m) => (gameModelInstance = m));\n\n/**\n * How often to auto save the game. 60_000 = 60 seconds.\n */\nconst autoSaveTime = 60_000;\n\n// some datetime values we will be using to calculate how much time has passed\n//let lastRunTime = Date.now();\nlet lastSaved = Date.now();\nlet time_since_last_update_ms = 0;\n\n/**\n * The game loop function that runs multiple times per second in the background.\n */\nexport function svelte_game_loop(current_time: number, ms_delta_t: number): void {\n  // const currentTime = Date.now();\n\n  // if lastSaved was more than 60 seconds ago we should save the game\n  if (current_time - lastSaved > autoSaveTime) {\n    lastSaved = current_time;\n    saveToStorage(gameModelInstance);\n    sendMessage(\"Game auto-saved\");\n  }\n\n  // calculate ms_delta_t based on the current time and the last run time\n  // we are using Math.max and Math.min to make sure ms_delta_t is between 0 and 1 seconds\n  // ms_delta_t = Math.max(Math.min((currentTime - lastRunTime) / 1000, 1), 0);\n  // lastRunTime = currentTime;\n\n  const seconds_delta_t = ms_delta_t / 1_000;\n  time_since_last_update_ms += ms_delta_t\n  if (time_since_last_update_ms > 16) {\n    game_update(seconds_delta_t); \n    time_since_last_update_ms = 0;\n  }\n}\n\n/**\n * Function to update all game data based on time.\n * This is where all idle calculations should start so they can be\n * used by the main loop and the offline progress function.\n * @param seconds_delta_t time in seconds since last update\n */\nfunction game_update(seconds_delta_t: number): void {\n  gameModelInstance.update(seconds_delta_t);\n  updateGameModel(); // We could update the UI less frequently? maybe every 16ms at most?\n}\n\n/**\n * Function to calculate the offline progress\n */\nexport function calculateOfflineProgress(): void {\n  // note how much we had before\n  const moneyBefore = gameModelInstance.wallet.money;\n\n  // calculate time in seconds since last saved\n  const currentTime = Date.now();\n  const offlineDeltaT = Math.max((currentTime - gameModelInstance.last_saved) / 1000, 0);\n\n  console.log(`Offline for ${offlineDeltaT} seconds`);\n\n  // perform the game update for the total time\n  game_update(offlineDeltaT);\n\n  // calculate total earned\n  const moneyEarned = gameModelInstance.wallet.money - moneyBefore;\n\n  console.log(`You have earned $${formatWhole(moneyEarned)} while offline!`);\n  sendMessage(`You have earned $${formatWhole(moneyEarned)} while offline!`);\n}\n"],"names":[],"mappings":";;;;;AAKA;;;;AAIA,IAAI,iBAA4B,CAAC;AACjC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AAEpD;;;AAGA,MAAM,YAAY,GAAG,KAAM,CAAC;AAE5B;AACA;AACA,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC3B,IAAI,yBAAyB,GAAG,CAAC,CAAC;AAElC;;;SAGgB,gBAAgB,CAAC,YAAoB,EAAE,UAAkB;;;IAIvE,IAAI,YAAY,GAAG,SAAS,GAAG,YAAY,EAAE;QAC3C,SAAS,GAAG,YAAY,CAAC;QACzB,aAAa,CAAC,iBAAiB,CAAC,CAAC;QACjC,WAAW,CAAC,iBAAiB,CAAC,CAAC;KAChC;;;;;IAOD,MAAM,eAAe,GAAG,UAAU,GAAG,IAAK,CAAC;IAC3C,yBAAyB,IAAI,UAAU,CAAA;IACvC,IAAI,yBAAyB,GAAG,EAAE,EAAE;QAClC,WAAW,CAAC,eAAe,CAAC,CAAC;QAC7B,yBAAyB,GAAG,CAAC,CAAC;KAC/B;AACH,CAAC;AAED;;;;;;AAMA,SAAS,WAAW,CAAC,eAAuB;IAC1C,iBAAiB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;IAC1C,eAAe,EAAE,CAAC;AACpB,CAAC;AAED;;;SAGgB,wBAAwB;;IAEtC,MAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,KAAK,CAAC;;IAGnD,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC/B,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,GAAG,iBAAiB,CAAC,UAAU,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;IAEvF,OAAO,CAAC,GAAG,CAAC,eAAe,aAAa,UAAU,CAAC,CAAC;;IAGpD,WAAW,CAAC,aAAa,CAAC,CAAC;;IAG3B,MAAM,WAAW,GAAG,iBAAiB,CAAC,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC;IAEjE,OAAO,CAAC,GAAG,CAAC,oBAAoB,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;IAC3E,WAAW,CAAC,oBAAoB,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;AAC7E;;;;"}