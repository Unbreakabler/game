{"version":3,"file":"stats_base_enemies.js","sources":["../../../../../src/gamelogic/td/stats_base_enemies.ts"],"sourcesContent":["// import { EnemyType } from './enemy_wave_generator'\n\nimport { ENEMY_MODIFIERS, ModifierId } from \"./enemy_wave_generator\";\n\nexport enum EnemyType {\n  green_knight,\n  bug,\n  blue_dragon,\n}\n\nconst SPEED_FACTOR = 10;\nconst HEALTH_POINT_FACTOR = 100;\n\ninterface EnemyStats {\n  health_points: number,\n  speed: number,\n  experience: number,\n  money: number,\n  sprite_link: string,\n}\n\ntype StatLibrary = {\n  [k in EnemyType]: EnemyStats\n}\n\nconst ENEMY_BASE_STATS: StatLibrary = {\n  [EnemyType.green_knight]: {\n  health_points: 200,\n    speed: Phaser.Math.GetSpeed(50, 1),\n    experience: 2,\n    money: 2,\n    sprite_link: 'static/green_knight.png'\n  }, \n  [EnemyType.bug]: {\n    health_points: 100,\n    speed: Phaser.Math.GetSpeed(75, 1),\n    experience: 1,\n    money: 1,\n    sprite_link: 'static/bug.png'\n  },\n  [EnemyType.blue_dragon]: {\n    health_points: 500,\n    speed: Phaser.Math.GetSpeed(50, 1),\n    experience: 10,\n    money: 10,\n    sprite_link: 'static/blue_dragon.png'\n  }\n}\n\nconsole.log('ENEMY_BASE_STATS', ENEMY_BASE_STATS)\n\n/**\n * Caluclate enemy mob difficulty based on base stats (speed and health).\n * @param enemy_stats \n * @returns \n */\nexport const calculateEnemyDifficulty = (enemy_stats: EnemyStats) => {\n  let difficulty = 0;\n\n  difficulty += (enemy_stats.health_points/HEALTH_POINT_FACTOR) // \"1\" diff for each 100 hp\n  difficulty += (enemy_stats.speed/1)*SPEED_FACTOR // normalize speed and scale by constant factor\n\n  return difficulty\n}\n\nexport const applyEnemyModifiers = (enemy_stats: EnemyStats, modifier_ids: ModifierId[]) => {\n  let modified_stats = { ...enemy_stats }\n\n  for (let i = 0; i < modifier_ids.length; i ++) {\n    const mod = ENEMY_MODIFIERS[modifier_ids[i]]\n    if (!mod) continue\n    // group mods have already affected group size, skip, should be removed from list.\n    if (mod.mod_type === 'group') continue;\n\n    if (mod.stat_multipliers?.health_points) {\n      modified_stats.health_points *= mod.stat_multipliers.health_points\n    }\n\n    if (mod.stat_multipliers?.movement_speed) {\n      modified_stats.speed *= mod.stat_multipliers.movement_speed\n    }  \n  }\n\n  return modified_stats\n}\n\nexport default ENEMY_BASE_STATS"],"names":[],"mappings":";;AAAA;IAIY;AAAZ,WAAY,SAAS;IACnB,yDAAY,CAAA;IACZ,uCAAG,CAAA;IACH,uDAAW,CAAA;AACb,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AAED,MAAM,YAAY,GAAG,EAAE,CAAC;AACxB,MAAM,mBAAmB,GAAG,GAAG,CAAC;MAc1B,gBAAgB,GAAgB;IACpC,CAAC,SAAS,CAAC,YAAY,GAAG;QAC1B,aAAa,EAAE,GAAG;QAChB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,UAAU,EAAE,CAAC;QACb,KAAK,EAAE,CAAC;QACR,WAAW,EAAE,yBAAyB;KACvC;IACD,CAAC,SAAS,CAAC,GAAG,GAAG;QACf,aAAa,EAAE,GAAG;QAClB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,UAAU,EAAE,CAAC;QACb,KAAK,EAAE,CAAC;QACR,WAAW,EAAE,gBAAgB;KAC9B;IACD,CAAC,SAAS,CAAC,WAAW,GAAG;QACvB,aAAa,EAAE,GAAG;QAClB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,UAAU,EAAE,EAAE;QACd,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,wBAAwB;KACtC;EACF;AAED,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,gBAAgB,CAAC,CAAA;AAEjD;;;;;MAKa,wBAAwB,GAAG,CAAC,WAAuB;IAC9D,IAAI,UAAU,GAAG,CAAC,CAAC;IAEnB,UAAU,KAAK,WAAW,CAAC,aAAa,GAAC,mBAAmB,CAAC,CAAA;IAC7D,UAAU,IAAI,CAAC,WAAW,CAAC,KAAK,GAAC,CAAC,IAAE,YAAY,CAAA;IAEhD,OAAO,UAAU,CAAA;AACnB,EAAC;MAEY,mBAAmB,GAAG,CAAC,WAAuB,EAAE,YAA0B;IACrF,IAAI,cAAc,GAAG,EAAE,GAAG,WAAW,EAAE,CAAA;IAEvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAG,EAAE;QAC7C,MAAM,GAAG,GAAG,eAAe,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;QAC5C,IAAI,CAAC,GAAG;YAAE,SAAQ;;QAElB,IAAI,GAAG,CAAC,QAAQ,KAAK,OAAO;YAAE,SAAS;QAEvC,IAAI,GAAG,CAAC,gBAAgB,EAAE,aAAa,EAAE;YACvC,cAAc,CAAC,aAAa,IAAI,GAAG,CAAC,gBAAgB,CAAC,aAAa,CAAA;SACnE;QAED,IAAI,GAAG,CAAC,gBAAgB,EAAE,cAAc,EAAE;YACxC,cAAc,CAAC,KAAK,IAAI,GAAG,CAAC,gBAAgB,CAAC,cAAc,CAAA;SAC5D;KACF;IAED,OAAO,cAAc,CAAA;AACvB;;;;;"}