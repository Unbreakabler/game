import { SvelteComponent, init, safe_not_equal, element, append, create_component, space, attr, insert, mount_component, noop, transition_in, transition_out, detach, destroy_component, onMount, binding_callbacks } from '../../node_modules/svelte/internal/index.mjs.js';
import '../../node_modules/phaser/dist/phaser.js';
import Slot_controls from '../components/slot_controls.svelte.js';
import Tower_details from '../components/tower_details.svelte.js';
import Menu from '../components/menu.svelte.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import Main from '../scenes/main.js';
import TD from '../scenes/td.js';
import Wave_indicator from '../components/wave_indicator.svelte.js';
import { OutlinePipeline } from '../plugins/outline.js';
import Resources from '../components/resources.svelte.js';
import Wave_status from '../components/wave_status.svelte.js';

/* src/app/game.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-2vycs8-style";
	style.textContent = ".main.svelte-2vycs8{overflow:hidden;width:100%;height:100%;display:grid;grid-template-columns:auto minmax(0, 1fr);grid-template-rows:minmax(0, 1fr) minmax(100px, 0.5fr);grid-template-areas:\"indicator parent\" \"menu parent\"}.indicator.svelte-2vycs8{display:flex;grid-area:indicator;overflow-y:hidden}.parent.svelte-2vycs8{grid-area:parent;position:relative}.inventory.svelte-2vycs8{grid-area:inventory;position:absolute;bottom:0px;left:0px}.menu.svelte-2vycs8{display:flex;grid-area:menu}canvas.svelte-2vycs8{z-index:-1}.resources.svelte-2vycs8{display:flex;flex-direction:row;position:absolute;right:250px;top:0px;align-items:center;color:black;-webkit-text-fill-color:white;-webkit-text-stroke-width:1px;-webkit-text-stroke-color:black;font-weight:900;font-size:24px;font-family:\"Courier New\", Courier, monospace}.details.svelte-2vycs8{position:absolute;right:0px;top:0px;height:100%;display:flex;flex-direction:column;justify-content:space-between}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div7;
	let div0;
	let waveindicator;
	let t0;
	let div5;
	let canvas_1;
	let t1;
	let div1;
	let wavestatus;
	let t2;
	let resources;
	let t3;
	let div2;
	let towerdetails;
	let t4;
	let div4;
	let div3;
	let slotcontrols;
	let t5;
	let div6;
	let menu;
	let current;
	waveindicator = new Wave_indicator({});
	wavestatus = new Wave_status({});
	resources = new Resources({});
	towerdetails = new Tower_details({});
	slotcontrols = new Slot_controls({});
	menu = new Menu({});

	return {
		c() {
			div7 = element("div");
			div0 = element("div");
			create_component(waveindicator.$$.fragment);
			t0 = space();
			div5 = element("div");
			canvas_1 = element("canvas");
			t1 = space();
			div1 = element("div");
			create_component(wavestatus.$$.fragment);
			t2 = space();
			create_component(resources.$$.fragment);
			t3 = space();
			div2 = element("div");
			create_component(towerdetails.$$.fragment);
			t4 = space();
			div4 = element("div");
			div3 = element("div");
			create_component(slotcontrols.$$.fragment);
			t5 = space();
			div6 = element("div");
			create_component(menu.$$.fragment);
			attr(div0, "class", "indicator svelte-2vycs8");
			attr(canvas_1, "id", "game-container");
			attr(canvas_1, "class", "svelte-2vycs8");
			attr(div1, "class", "resources svelte-2vycs8");
			attr(div2, "class", "details svelte-2vycs8");
			attr(div3, "class", "column");
			attr(div4, "class", "inventory svelte-2vycs8");
			attr(div5, "class", "parent svelte-2vycs8");
			attr(div5, "id", "parent");
			attr(div6, "class", "menu svelte-2vycs8");
			attr(div7, "class", "main svelte-2vycs8");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div0);
			mount_component(waveindicator, div0, null);
			append(div7, t0);
			append(div7, div5);
			append(div5, canvas_1);
			/*canvas_1_binding*/ ctx[1](canvas_1);
			append(div5, t1);
			append(div5, div1);
			mount_component(wavestatus, div1, null);
			append(div1, t2);
			mount_component(resources, div1, null);
			append(div5, t3);
			append(div5, div2);
			mount_component(towerdetails, div2, null);
			append(div5, t4);
			append(div5, div4);
			append(div4, div3);
			mount_component(slotcontrols, div3, null);
			append(div7, t5);
			append(div7, div6);
			mount_component(menu, div6, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(waveindicator.$$.fragment, local);
			transition_in(wavestatus.$$.fragment, local);
			transition_in(resources.$$.fragment, local);
			transition_in(towerdetails.$$.fragment, local);
			transition_in(slotcontrols.$$.fragment, local);
			transition_in(menu.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(waveindicator.$$.fragment, local);
			transition_out(wavestatus.$$.fragment, local);
			transition_out(resources.$$.fragment, local);
			transition_out(towerdetails.$$.fragment, local);
			transition_out(slotcontrols.$$.fragment, local);
			transition_out(menu.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div7);
			destroy_component(waveindicator);
			/*canvas_1_binding*/ ctx[1](null);
			destroy_component(wavestatus);
			destroy_component(resources);
			destroy_component(towerdetails);
			destroy_component(slotcontrols);
			destroy_component(menu);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let canvas;
	gameModel.subscribe(m => m);

	onMount(() => {
		const config = {
			type: Phaser.WEBGL,
			width: 1920,
			height: 1080,
			scale: {
				parent: "parent",
				mode: Phaser.Scale.FIT,
				autoCenter: Phaser.Scale.NO_CENTER
			},
			physics: {
				default: "arcade",
				arcade: { debug: false }
			},
			canvas,
			scene: [TD, Main],
			pipeline: [OutlinePipeline]
		};

		new Phaser.Game(config);
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	return [canvas, canvas_1_binding];
}

class Game extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-2vycs8-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Game;
//# sourceMappingURL=game.svelte.js.map
