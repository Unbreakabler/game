import { SvelteComponent, init, safe_not_equal, element, append, create_component, mount_component, transition_in, transition_out, destroy_component, attr, insert, group_outros, check_outros, detach, destroy_each } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import Tower_slot from './tower_slot.svelte.js';

/* src/components/slot_controls.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-19ihlb8-style";
	style.textContent = "div.svelte-19ihlb8{display:flex;flex-direction:column;justify-content:center}.towers.svelte-19ihlb8{margin-top:10px;display:flex;flex-direction:row;justify-content:left}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (16:2) {#each slots as tower_id, index}
function create_each_block(ctx) {
	let towerslot;
	let current;

	towerslot = new Tower_slot({
			props: {
				tower_id: /*tower_id*/ ctx[4],
				tower_info: /*slot_tower_info*/ ctx[1][/*index*/ ctx[6]]
			}
		});

	return {
		c() {
			create_component(towerslot.$$.fragment);
		},
		m(target, anchor) {
			mount_component(towerslot, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const towerslot_changes = {};
			if (dirty & /*slots*/ 1) towerslot_changes.tower_id = /*tower_id*/ ctx[4];
			if (dirty & /*slot_tower_info*/ 2) towerslot_changes.tower_info = /*slot_tower_info*/ ctx[1][/*index*/ ctx[6]];
			towerslot.$set(towerslot_changes);
		},
		i(local) {
			if (current) return;
			transition_in(towerslot.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(towerslot.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(towerslot, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let each_value = /*slots*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "towers svelte-19ihlb8");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*slots, slot_tower_info*/ 3) {
				each_value = /*slots*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let slots;
	let slot_tower_info;
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(2, gameModelInstance = m));

	const towerInfo = tower_id => {
		// console.log('called slot control tower info')
		return gameModelInstance.tower_defense.getTower(tower_id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 4) {
			 $$invalidate(0, slots = gameModelInstance.tower_defense.slots);
		}

		if ($$self.$$.dirty & /*slots*/ 1) {
			// $: console.log('slots changed?', slots)
			 $$invalidate(1, slot_tower_info = slots.map(slot_id => slot_id ? towerInfo(slot_id) : null));
		}
	};

	return [slots, slot_tower_info, gameModelInstance];
}

class Slot_controls extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-19ihlb8-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Slot_controls;
//# sourceMappingURL=slot_controls.svelte.js.map
