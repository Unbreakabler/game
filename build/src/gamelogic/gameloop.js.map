{"version":3,"file":"gameloop.js","sources":["../../../../src/gamelogic/gameloop.ts"],"sourcesContent":["import { gameModel, GameModel } from \"./gamemodel\";\nimport { sendMessage } from \"./notifications\";\nimport { saveSaveGame } from \"./saveloadfunctions\";\n// import { generators } from \"./upgrades\";\nimport { jobs } from \"./jobs\";\nimport { formatWhole } from \"./utils\";\n\n/**\n * Reference to the GameModel.\n * We use the subscribe function so if the store is updated our local instance will also update.\n */\nlet gameModelInstance: GameModel;\ngameModel.subscribe((m) => (gameModelInstance = m));\n\n/**\n * how often to run the loop. 200ms = 5 times per second\n * 200ms or 100ms is usually fast enough to feel responsive without wasting too much CPU time\n */\nconst ms = 200;\n\n/**\n * How often to auto save the game. 60_000 = 60 seconds.\n */\nconst autoSaveTime = 60_000;\n\n/**\n * A reference to the interval that can be used to stop it if we need to\n */\nlet interval: number;\n\n/**\n * This function will start the game loop running at the desired rate, and save a reference to the interval so it can be stopped later\n */\n// export function startGameLoop() {\n\n//     console.log('calculating offline progess')\n//     calculateOfflineProgress();\n\n//     console.log('starting the game loop');\n//     interval = setInterval(gameLoop, ms);\n// }\n\n// some datetime values we will be using to calculate how much time has passed\n//let lastRunTime = Date.now();\nlet lastSaved = Date.now();\n\n/**\n * delta_t or delta time is the time difference in seconds since the last time the loop ran\n */\n//let delta_t: number = 0;\n\n/**\n * The game loop function that runs multiple times per second in the background.\n */\nexport function svelte_game_loop(current_time: number, ms_delta_t: number): void {\n  // const currentTime = Date.now();\n\n  // if lastSaved was more than 60 seconds ago we should save the game\n  if (current_time - lastSaved > autoSaveTime) {\n    lastSaved = current_time;\n    saveSaveGame(gameModelInstance.saveData);\n    sendMessage(\"Game auto-saved\");\n  }\n\n  // calculate ms_delta_t based on the current time and the last run time\n  // we are using Math.max and Math.min to make sure ms_delta_t is between 0 and 1 seconds\n  // ms_delta_t = Math.max(Math.min((currentTime - lastRunTime) / 1000, 1), 0);\n  // lastRunTime = currentTime;\n\n  const seconds_delta_t = ms_delta_t / 1_000;\n  game_update(seconds_delta_t);\n}\n\n/**\n * Function to update all game data based on time.\n * This is where all idle calculations should start so they can be\n * used by the main loop and the offline progress function.\n * @param delta_t time in seconds since last update\n */\nfunction game_update(delta_t: number): void {\n  jobs.forEach((job) => job.update(delta_t));\n}\n\n/**\n * Function to calculate the offline progress\n */\nfunction calculateOfflineProgress(): void {\n  // note how much we had before\n  const moneyBefore = gameModelInstance.saveData.money;\n\n  // calculate time in seconds since last saved\n  const currentTime = Date.now();\n  const offlineDeltaT = Math.max((currentTime - gameModelInstance.saveData.lastSaved) / 1000, 0);\n\n  console.log(`Offline for ${offlineDeltaT} seconds`);\n\n  // perform the game update for the total time\n  game_update(offlineDeltaT);\n\n  // calculate total earned\n  const moneyEarned = gameModelInstance.saveData.money - moneyBefore;\n\n  sendMessage(`You have earned $${formatWhole(moneyEarned)} while offline!`);\n}\n"],"names":[],"mappings":";;;;;AAOA;;;;AAIA,IAAI,iBAA4B,CAAC;AACjC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AAQpD;;;AAGA,MAAM,YAAY,GAAG,KAAM,CAAC;AAO5B;;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAE3B;;;AAGA;AAEA;;;SAGgB,gBAAgB,CAAC,YAAoB,EAAE,UAAkB;;;IAIvE,IAAI,YAAY,GAAG,SAAS,GAAG,YAAY,EAAE;QAC3C,SAAS,GAAG,YAAY,CAAC;QACzB,YAAY,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACzC,WAAW,CAAC,iBAAiB,CAAC,CAAC;KAChC;;;;;IAOD,MAAM,eAAe,GAAG,UAAU,GAAG,IAAK,CAAC;IAC3C,WAAW,CAAC,eAAe,CAAC,CAAC;AAC/B,CAAC;AAED;;;;;;AAMA,SAAS,WAAW,CAAC,OAAe;IAClC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;AAC7C;;;;"}