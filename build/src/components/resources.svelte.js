import { SvelteComponent, init, safe_not_equal, element, append, text, space, attr, insert, set_data, detach, noop, destroy_each } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import { formatNumber } from '../gamelogic/util/utils.js';

/* src/components/resources.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-ta66yf-style";
	style.textContent = ".resource-container.svelte-ta66yf.svelte-ta66yf{display:flex;justify-content:space-between;padding:5px;color:black;-webkit-text-fill-color:white;-webkit-text-stroke-width:1px;-webkit-text-stroke-color:black;font-weight:900;font-size:24px;font-family:\"Courier New\", Courier, monospace}.money.svelte-ta66yf.svelte-ta66yf{width:400px;padding:10px;display:flex;justify-content:flex-end;align-items:center}.money.svelte-ta66yf div.svelte-ta66yf{margin-right:5px}.coin{width:15px;height:15px;background-color:#ddb843;display:inline-block;border-radius:100px;box-shadow:1px 1px}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i][0];
	child_ctx[6] = list[i][1];
	return child_ctx;
}

// (23:4) {#each resources as [key, val]}
function create_each_block(ctx) {
	let div;
	let t0_value = /*key*/ ctx[5].toLocaleUpperCase() + "";
	let t0;
	let t1;
	let t2_value = /*val*/ ctx[6] + "";
	let t2;
	let t3;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text(":");
			t2 = text(t2_value);
			t3 = space();
			attr(div, "class", "svelte-ta66yf");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
			append(div, t3);
		},
		p(ctx, dirty) {
			if (dirty & /*resources*/ 2 && t0_value !== (t0_value = /*key*/ ctx[5].toLocaleUpperCase() + "")) set_data(t0, t0_value);
			if (dirty & /*resources*/ 2 && t2_value !== (t2_value = /*val*/ ctx[6] + "")) set_data(t2, t2_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let div0;
	let t0;
	let t1;
	let div1;
	let t2;
	let each_value = /*resources*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			t0 = text(/*money*/ ctx[0]);
			t1 = space();
			div1 = element("div");
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "svelte-ta66yf");
			attr(div1, "class", "coin svelte-ta66yf");
			attr(div2, "class", "money svelte-ta66yf");
			attr(div3, "class", "resource-container svelte-ta66yf");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div2, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*money*/ 1) set_data(t0, /*money*/ ctx[0]);

			if (dirty & /*resources*/ 2) {
				each_value = /*resources*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let money;
	let resources;
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(2, gameModelInstance = m));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 4) {
			 $$invalidate(0, money = formatNumber(gameModelInstance.wallet.money, 2));
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 4) {
			 $$invalidate(1, resources = Object.entries(gameModelInstance.resources));
		}
	};

	return [money, resources, gameModelInstance];
}

class Resources extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-ta66yf-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Resources;
//# sourceMappingURL=resources.svelte.js.map
