{"version":3,"file":"jobs.js","sources":["../../../../src/gamelogic/jobs.ts"],"sourcesContent":["import { gameModel, GameModel, updateGameModel } from \"./gamemodel\";\nimport { saveSaveGame } from \"./saveloadfunctions\";\n\n/**\n * Reference to the GameModel.\n * We use the subscribe function so if the store is updated our local instance will also update.\n */\nlet gameModelInstance: GameModel;\ngameModel.subscribe((m) => (gameModelInstance = m));\n\nexport class Job {\n  public id: number; // unique id\n  public name: string;\n  public description: string;\n  public base_exp: number;\n  public base_income: number;\n  public base_exp_rate: number;\n  public multiplier: number;\n\n  //prettier-ignore\n  public constructor(id: number, name: string, description: string, base_exp: number, base_income: number, base_exp_rate:number, multiplier: number) {\n      this.id = id;\n      this.name = name;\n      this.description = description;\n      this.base_exp = base_exp;\n      this.base_income = base_income;\n      this.base_exp_rate = base_exp_rate;\n      this.multiplier = multiplier;\n  }\n\n  public getCurrentLevel(): number {\n    return gameModelInstance.saveData.jobs[this.id].current_level;\n  }\n\n  public getCurrentExp(): number {\n    return gameModelInstance.saveData.jobs[this.id].current_exp;\n  }\n\n  public getMaxLevelReached(): number {\n    return gameModelInstance.saveData.jobs[this.id].max_level_reached;\n  }\n\n  /**\n   * Get the current price to buy one of these upgrades.\n   * Formula to calculate the price is base_exp * (multiplier ^ bought)\n   */\n  // Memoize these functions\n  public getTotalExpForLevel(base_exp: number, multiplier: number, current_level: number): number {\n    return base_exp * Math.pow(multiplier, current_level);\n  }\n\n  public getCurrentIncome(): number {\n    return this.base_exp * Math.pow(this.multiplier, this.getCurrentLevel());\n  }\n\n  public getCurrentExpRate(): number {\n    //prettier-ignore\n    return this.base_exp_rate \n      + (this.base_exp_rate * (0.5 * this.getCurrentLevel()) \n      + (this.base_exp_rate * (0.1 * (this.getMaxLevelReached() + 1))))\n  }\n\n  public update(delta_t: number): void {\n    const current_level = this.getCurrentLevel();\n    if (current_level > 0) {\n      const exp_per_second = this.getCurrentExpRate();\n      const income_per_second = this.getCurrentIncome();\n      let current_exp = this.getCurrentExp();\n      current_exp += exp_per_second * delta_t;\n      const exp_for_level = this.getTotalExpForLevel(this.base_exp, this.multiplier, current_level);\n      if (current_exp > exp_for_level) {\n        gameModelInstance.saveData.jobs[this.id].current_level = current_level + 1;\n        current_exp -= exp_for_level;\n        saveSaveGame(gameModelInstance.saveData);\n      }\n      gameModelInstance.saveData.jobs[this.id].current_exp = current_exp;\n      gameModelInstance.addMoney(income_per_second * delta_t);\n      updateGameModel();\n    }\n  }\n}\n\n//prettier-ignore\nexport const jobs = [\n  new Job(\n    1, \n    \"Starter\", \n    \"Starting Job\", \n    100, \n    1, \n    10, \n    1.1,\n  ), \n  new Job(\n    2, \n    \"Starter2\", \n    \"Starting Job\", \n    1000, \n    10, \n    10, \n    2.0\n  )\n];\n"],"names":[],"mappings":"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"}