{"version":3,"file":"tower_defense.js","sources":["../../../../../src/gamelogic/td/tower_defense.ts"],"sourcesContent":["import { Exclude } from \"class-transformer\";\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { EnemyWave, generateWave } from './enemy_wave_generator'\nimport { getTowerAttributes, TowerCalculatedAttributes } from \"./stats_base_towers\";\nimport { AttributeModifierIds, applyTowerAttributeModifiers } from \"./stats_tower_modifiers\";\n\ntype BASIC_TOWER_IDS = 'basic_1'\ntype MACHINE_GUN_IDS = 'machine_gun_1'\n\nexport type TowerId = BASIC_TOWER_IDS | MACHINE_GUN_IDS\nexport type TowerBaseType = 'tower_base_1' | 'tower_base_2' | 'tower_base_3' | 'tower_base_4'\nexport type TargetingMode = 'first' | 'last' | 'strongest' | 'closest'\nexport type ProjectileType = 'small_bullet'\n\n\nexport interface TowerInfo {\n  status: TowerStatus,\n  attributes: TowerCalculatedAttributes,\n}\n\n\nexport interface TowerStatus {\n  id: TowerId,\n  tier: integer,\n  // do frames get exp? modifiers? hmm.\n  // I think I would like towers to both \"level\" and be \"upgraded\", essentially having two levels.\n  // should the exp levels carry between runs? What should carry between runs?\n  exp_level?: integer,\n  current_exp?: integer,\n  exp_for_next_tier?: CallableFunction, \n  type: TowerType,\n  projectile_type: ProjectileType,\n  x: number,\n  y: number,\n  is_placed: boolean,\n  is_selected: boolean,\n  targeting_mode: TargetingMode\n}\n\nconst BasicTowerStatusDefaults: TowerStatus = {\n  id: 'basic_1',\n  tier: 0,\n  type: 'basic',\n  projectile_type: 'small_bullet',\n  x: 0,\n  y: 0,\n  is_placed: false,\n  is_selected: false,\n  targeting_mode: 'closest',\n}\n\nconst MachineGunTowerStatusDefaults: TowerStatus = {\n  id: 'machine_gun_1',\n  tier: 1,\n  type: 'machine_gun',\n  projectile_type: 'small_bullet',\n  x: 0,\n  y: 0,\n  is_placed: false,\n  is_selected: false,\n  targeting_mode: 'closest',\n}\n\ninterface Stats {\n  [tower_id: string] : TowerRecordedStats\n}\n\ninterface TowerRecordedStats { \n  kills: { lifetime: number, prestige: number, [enemy_name: string]: number },\n  damage: {\n    lifetime: number,\n    prestige: number\n  }\n}\n\ninterface WaveInfo {\n  total: number,\n  spawned: number,\n  alive: number,\n  killed: number,\n  leaked: number,\n  lives: number,\n  level: number,\n}\n\nexport type TowerType = 'basic' | 'machine_gun'\n\nexport type SelectionCursor = 'hovered' | 'selected'\n\nexport class TowerDefense {\n  @Exclude() public selection: { type: TowerType, id: TowerId, cursor: SelectionCursor } | null = null;\n\n  // Need to expose below but it breaks\n  private tower_map: { [id in TowerId]: TowerStatus };\n\n  private slot_tower_attribute_modifier_map: { [id in TowerId]: {id: AttributeModifierIds, level: integer}[]};\n\n  public slots: Array<TowerId | null>\n  public stats: Stats = {}\n  public waves: EnemyWave[] = [];\n\n  public current_wave_info: WaveInfo = { total: 0, spawned: 0, alive: 0, killed: 0, leaked: 0, lives: 0, level: 0 };\n  public current_wave_difficulty: number = 100;\n  public time_multiplier: number = 1;\n  public first_tower_is_placed: boolean = false;\n\n  public inventory = [\n    { type: 'tower', item_id: 'basic_1', id: uuidv4() },\n    { type: 'tower', item_id: 'machine_gun_1', id: uuidv4()},\n    { type: 'modifier', item_id: 'physical_1', id: uuidv4()},\n    { type: 'modifier', item_id: 'physical_1', id: uuidv4()},\n    { type: 'modifier', item_id: 'chain_1', id: uuidv4()},\n    { type: 'modifier', item_id: 'chain_1', id: uuidv4()},\n  ]\n\n  public constructor() {\n    this.tower_map = get_default_tower_map();\n    this.slot_tower_attribute_modifier_map = get_default_slot_tower_attribute_modifiers();\n    this.slots = ['basic_1', 'machine_gun_1', null, null, null]\n    this.slots.forEach(tower_id => {\n      if (tower_id) this.stats[tower_id] = generate_default_stats()\n    }); \n\n    for (let i = 0; i < 10; i++) {\n      // Generate the first 10 waves\n      this.generateEnemyWave()\n    }\n  }\n\n  public getTower(id: TowerId | undefined): TowerInfo | null {\n    if (!id) return null;\n    const status = this.tower_map[id]\n    if (!status) return null;\n    const attributes = getTowerAttributes(status)\n    // Apply modifiers to the attributes, these would mods that increase attack speed, projectiles, etc.\n    const attribute_modifier_ids = this.slot_tower_attribute_modifier_map[id]\n\n    // Lookup modifiers by id and pass tower attributes through the modifier functions.\n    const modified_attributes = applyTowerAttributeModifiers(attributes, attribute_modifier_ids)\n\n    return { status, attributes: modified_attributes }\n  }\n\n  public getTowerStats(id: TowerId): TowerRecordedStats {\n    const tower_stats = this.stats[id]\n    if (tower_stats) return this.stats[id]\n    this.stats[id] = generate_default_stats()\n    return this.stats[id]\n  }\n\n  public setSelection(id: TowerId | null, cursor: SelectionCursor = 'selected') {\n    if (!id) {\n      this.selection = null; \n      return;\n    }\n    for (const [name, tower] of Object.entries(this.tower_map)) {\n      if (tower.id !== id) {\n        tower.is_selected = false;\n      } else {\n        const type = tower.type\n        tower.is_selected = true;\n        this.selection = { type, id, cursor }\n      }\n    }\n  }\n\n  public placeTower(id: TowerId, x: number, y: number) {\n    const tower = this.tower_map[id]\n    if (!tower) return\n\n    this.first_tower_is_placed = true;\n    tower.x = x;\n    tower.y = y;\n    tower.is_placed = true;\n    tower.is_selected = false;\n  }\n\n  public recordTowerDamage(tower_id: string, damage: number) {\n    const tower = this.getTower(tower_id as TowerId)\n    if (!tower) return\n\n    const tower_stats = this.getTowerStats(tower_id as TowerId)\n    tower_stats.damage.prestige += damage;\n\n    // TODO(jon): track tower accuracy, projectiles fired, etc etc\n  }\n\n  public recordTowerKill(tower_id: string, enemy_name: string) {\n    const tower = this.getTower(tower_id as TowerId)\n    if (!tower) return\n\n    const tower_stats = this.getTowerStats(tower_id as TowerId)\n    if (!tower_stats.kills) tower_stats.kills = { lifetime: 0, prestige: 0 }\n    if (!tower_stats.kills[enemy_name]) tower_stats.kills[enemy_name] = 0;\n    tower_stats.kills.prestige++;\n    tower_stats.kills[enemy_name]++;\n    this.current_wave_info.alive--;\n    this.current_wave_info.killed++;\n  }\n\n  public recordEnemyLeak(enemy: string) {\n    // record leak count per wave?\n    // TODO(jon): more, better stats. How many enemies were leaked? Current lives? etc.\n    this.current_wave_info.alive--;\n    this.current_wave_info.leaked++;\n  }\n\n  public generateEnemyWave() {\n    this.waves.push(generateWave(this.current_wave_difficulty));\n    // TODO(jon): Figure out how to increase difficulty over time, \n    // a linear increase wont match item/drop/upgrade power spikes.\n    this.current_wave_difficulty += 1;\n  }\n  \n  public spawnNextWave() {\n    this.generateEnemyWave();\n    this.current_wave_info.level++;\n    this.waves.shift()!;\n  }\n\n  public getCurrentWave() {\n    return this.waves[0];\n  }\n}\n\nconst get_default_tower_map = () => {\n  return {\n    'basic_1': BasicTowerStatusDefaults,\n    'machine_gun_1': MachineGunTowerStatusDefaults\n  }\n}\n\nconst get_default_slot_tower_attribute_modifiers = (): { [id in TowerId]: {id: AttributeModifierIds, level: integer}[]} => {\n  return {\n    'basic_1': [{ id: 'physical_1', level: 10 }, { id: 'chain_1', level: 10000 }],\n    'machine_gun_1': [{ id: 'physical_1', level: 10 }, { id: 'chain_1', level: 20}],\n  }\n}\n\nconst generate_default_stats = () => {\n  return {\n    kills: {\n      lifetime: 0,\n      prestige: 0,\n    },\n    damage: {\n      lifetime: 0,\n      prestige: 0,\n    }\n  }\n}\n\n\n/**\n * \n * slots = []; // ordered array, index 0 = slot 1, index 1 = slot 2, etc.\n * slot = {\n *  tower_id: 'basic_1',\n *  modifier_ids: ['chain_1']\n * }\n * \n * slots = [\n * { tower_id: 'basic_1', modifier_ids: ['chain_1']}\n * ]\n * \n * What makes up a slot?\n * 1. Position on the bar\n * 2. Modifiers bound to slot\n * 3. Tower (tower parts) bound to slot\n * \n */"],"names":["uuidv4"],"mappings":"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"}