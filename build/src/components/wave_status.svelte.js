import { SvelteComponent, init, safe_not_equal, element, append, text, space, attr, insert, set_data, noop, detach } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/components/wave_status.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-3fgoe4-style";
	style.textContent = ".main.svelte-3fgoe4{display:flex;flex-direction:column}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div3;
	let div0;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let div1;
	let t5;
	let t6;
	let t7;
	let t8;
	let t9;
	let div2;
	let t10;
	let t11;

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = text("Spawned: ");
			t1 = text(/*spawned*/ ctx[1]);
			t2 = text(" / ");
			t3 = text(/*total*/ ctx[0]);
			t4 = space();
			div1 = element("div");
			t5 = text("Alive: ");
			t6 = text(/*alive*/ ctx[2]);
			t7 = text(" / ");
			t8 = text(/*spawned*/ ctx[1]);
			t9 = space();
			div2 = element("div");
			t10 = text("Leaked: ");
			t11 = text(/*leaked*/ ctx[3]);
			attr(div3, "class", "main svelte-3fgoe4");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(div0, t3);
			append(div3, t4);
			append(div3, div1);
			append(div1, t5);
			append(div1, t6);
			append(div1, t7);
			append(div1, t8);
			append(div3, t9);
			append(div3, div2);
			append(div2, t10);
			append(div2, t11);
		},
		p(ctx, [dirty]) {
			if (dirty & /*spawned*/ 2) set_data(t1, /*spawned*/ ctx[1]);
			if (dirty & /*total*/ 1) set_data(t3, /*total*/ ctx[0]);
			if (dirty & /*alive*/ 4) set_data(t6, /*alive*/ ctx[2]);
			if (dirty & /*spawned*/ 2) set_data(t8, /*spawned*/ ctx[1]);
			if (dirty & /*leaked*/ 8) set_data(t11, /*leaked*/ ctx[3]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let total;
	let spawned;
	let alive;
	let leaked;
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(4, gameModelInstance = m));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(0, total = gameModelInstance.tower_defense.current_wave_info.total);
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(1, spawned = gameModelInstance.tower_defense.current_wave_info.spawned);
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(2, alive = gameModelInstance.tower_defense.current_wave_info.alive);
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 gameModelInstance.tower_defense.current_wave_info.killed;
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(3, leaked = gameModelInstance.tower_defense.current_wave_info.leaked);
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 gameModelInstance.tower_defense.current_wave_info.lives;
		}
	};

	return [total, spawned, alive, leaked, gameModelInstance];
}

class Wave_status extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-3fgoe4-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Wave_status;
//# sourceMappingURL=wave_status.svelte.js.map
