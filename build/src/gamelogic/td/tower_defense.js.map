{"version":3,"file":"tower_defense.js","sources":["../../../../../src/gamelogic/td/tower_defense.ts"],"sourcesContent":["import { Exclude } from \"class-transformer\";\n\nimport { EnemyWave, generateWave } from './enemy_wave_generator'\nimport { getTowerAttributes, TowerCalculatedAttributes } from \"./stats_base_towers\";\n\ntype BASIC_TOWER_IDS = 'basic_1'\ntype MACHINE_GUN_IDS = 'machine_gun_1'\n\nexport type TowerId = BASIC_TOWER_IDS | MACHINE_GUN_IDS\nexport type TargetingMode = 'first' | 'last' | 'strongest' | 'closest'\n\n\nexport interface TowerInfo {\n  status: TowerStatus,\n  attributes: TowerCalculatedAttributes,\n}\n\nexport interface TowerStatus {\n  id: TowerId,\n  tier: integer,\n  type: TowerType,\n  x: number,\n  y: number,\n  is_placed: boolean,\n  is_selected: boolean,\n  targeting_mode: TargetingMode\n}\n\nconst BasicTowerStatusDefaults: TowerStatus = {\n  id: 'basic_1',\n  tier: 0,\n  type: 'basic',\n  x: 0,\n  y: 0,\n  is_placed: false,\n  is_selected: false,\n  targeting_mode: 'closest',\n}\n\nconst MachineGunTowerStatusDefaults: TowerStatus = {\n  id: 'machine_gun_1',\n  tier: 0,\n  type: 'machine_gun',\n  x: 0,\n  y: 0,\n  is_placed: false,\n  is_selected: false,\n  targeting_mode: 'closest',\n}\n\ninterface Stats {\n  [tower_id: string] : TowerRecordedStats\n}\n\ninterface TowerRecordedStats { \n  kills: { lifetime: number, prestige: number, [enemy_name: string]: number },\n  damage: {\n    lifetime: number,\n    prestige: number,\n    types?: {\n      fire?: number,\n      ice?: number,\n      //etc\n    }\n  }\n}\n\ninterface WaveInfo {\n  total: number,\n  spawned: number,\n  alive: number,\n}\n\nexport type TowerType = 'basic' | 'machine_gun'\n\nexport type SelectionCursor = 'placement' | 'selected'\n\nexport class TowerDefense {\n  @Exclude() public selection: { type: TowerType, id: TowerId, cursor: SelectionCursor } | null = null;\n\n  // Need to expose below but it breaks\n  private tower_map: { [id in TowerId]: TowerStatus };\n  public slots: Array<TowerId | null>\n  public stats: Stats = {}\n  public waves: EnemyWave[] = [];\n  public current_wave_info: WaveInfo = { total: 0, spawned: 0, alive: 0 };\n  public current_wave_difficulty: number = 10;\n\n  public constructor() {\n    this.tower_map = get_default_tower_map();\n    this.slots = ['basic_1', 'machine_gun_1', null, null, null]\n    this.slots.forEach(tower_id => {\n      if (tower_id) {\n        this.stats[tower_id] = generate_default_stats()\n      }\n    }); \n\n    for (let i = 0; i < 10; i++) {\n      // Generate the first 10 waves\n      this.generateEnemyWave()\n    }\n  }\n\n  public getTower(id: TowerId): TowerInfo | null {\n    const status = this.tower_map[id]\n    if (!status) return null;\n    const attributes = getTowerAttributes(status)\n    return { status, attributes }\n  }\n\n  public getTowerStats(id: TowerId): TowerRecordedStats {\n    const tower_stats = this.stats[id]\n    if (tower_stats) return this.stats[id]\n    this.stats[id] = generate_default_stats()\n    return this.stats[id]\n  }\n\n  public setSelection(id: TowerId | null, cursor: SelectionCursor = 'selected') {\n    if (!id) {\n      this.selection = null; \n      return;\n    }\n    if (id in this.tower_map) {\n      const type = this.tower_map[id].type\n      this.selection = { type, id, cursor }\n    }\n  }\n\n  public placeTower(id: TowerId, x: number, y: number) {\n    const tower = this.tower_map[id]\n    console.log('placeTower', tower, id, x, y)\n    if (!tower) return\n\n    tower.x = x;\n    tower.y = y;\n    tower.is_placed = true;\n    tower.is_selected = false;\n  }\n\n  public recordTowerDamage(tower_id: string, damage: number) {\n    const tower = this.getTower(tower_id as TowerId)\n    if (!tower) return\n\n    const tower_stats = this.getTowerStats(tower_id as TowerId)\n    tower_stats.damage.prestige += damage;\n\n    // TODO(jon): track tower accuracy, projectiles fired, etc etc\n  }\n\n  public recordTowerKill(tower_id: string, enemy_name: string) {\n    const tower = this.getTower(tower_id as TowerId)\n    if (!tower) return\n\n    const tower_stats = this.getTowerStats(tower_id as TowerId)\n    if (!tower_stats.kills) tower_stats.kills = { lifetime: 0, prestige: 0 }\n    if (!tower_stats.kills[enemy_name]) tower_stats.kills[enemy_name] = 0;\n    tower_stats.kills.prestige++;\n    tower_stats.kills[enemy_name]++;\n  }\n\n  public recordEnemyLeak(enemy: string) {\n    // record leak count per wave?\n    this.current_wave_info.alive--;\n  }\n\n  public generateEnemyWave() {\n    this.waves.push(generateWave(this.current_wave_difficulty));\n    // TODO(jon): Figure out how to increase difficulty over time, \n    // a linear increase wont match item/drop/upgrade power spikes.\n    this.current_wave_difficulty++;\n  }\n\n  // public getWave() {\n  //   this.generateEnemyWave();\n  //   return this.waves.shift()!;\n  // }\n\n  public spawnNextWave() {\n    this.generateEnemyWave();\n    this.waves.shift()!;\n  }\n\n  public getCurrentWave() {\n    return this.waves[0];\n  }\n}\n\nconst get_default_tower_map = () => {\n  return {\n    'basic_1': BasicTowerStatusDefaults,\n    'machine_gun_1': MachineGunTowerStatusDefaults\n  }\n}\n\nconst generate_default_stats = () => {\n  return {\n    kills: {\n      lifetime: 0,\n      prestige: 0,\n    },\n    damage: {\n      lifetime: 0,\n      prestige: 0,\n    }\n  }\n}\n\n// Tower data structure.\n// Requirements:\n// 1. Track multiple towers of multiple \"tiers\".\n// 2. Merge multiple towers of the same tier into higher tiers.\n// 3. Track counts of towers owned at each tier.\n// 4. Automatically upgrade towers to the highest, or specific, tier (upgrade).\n\n// IDEAS:\n/*\nArray of arrays; The index of the out array corresponds to tower tier,\nie: towers[0] = list of all owned tier 1 tower ids, towers[1] = tier 2, etc.\n\nMerging can be accomplished by iterating through the list a single time,\nif any of the nested lists have len >= 2 they can be upgraded to the nex tier.\n\nWhen a new tower is added, a new ID is generated. When two towers are merged\na new tower is generated with a new ID, the old towers/ids are deleted.\nThe new tower will be roughly 2.1x as strong as the previous version making\nit always worthwhile to upgrade.\n\ntowers = [\n  [id1, id2, id4, id5],\n  []\n  [id3]\n]\n\nThis only works for a single tower type, to manage multiple tower types\nwe either need to store more information in the inner lists (and then check this on iteration).\nOr we need to store each tower type as its own array of arrays.\n\n2.0 idea:\n\ntowers = {\n  'basic': [\n    [id1, id2],\n  ],\n  'machine_gun': [\n    [id3, id4],\n    [id5]\n  ]\n}\n\n// Hashmap to lookup all towers in O(1) time, this allows us to easily pull up tower\n// stats when selecting a tower\ntower_map = {\n  id1: {\n    type: 'basic', \n    tier: 0,\n  },\n  id3: {\n    type: 'machine_gun',\n    tier: 0,\n  },\n  id5: {\n    type: 'machine_gun',\n    tier: 1, \n  }\n}\n\ntower_slots = [\n  {\n    modifiers: [burning_effect, freezing_effect]\n  }\n]\n\nmodifier_map = {\n  burning_effect: {\n    // Applies a visual burning effect\n    // deals X% of damage over X seconds\n  },\n  freezing_effect: {\n    // applies a cold effect\n    // causes enemies effected to move X% slower for X seconds\n  },\n}\n\nEach tower type is stored as an array of arrays.\nTowers are infinitely upgradeable, the upgrade stats will follow a forumla.\n\nQuestions:\n\nHow would you place multiple basic towers? How would you tell if you\nwere placing a tier 1 or a tier 2? \nDo we need a visual indicator on the hover placement? (I think yes)\n\nIf you have the 'basic' tower in 'slot_1', and you place two of them,\nthe first tower will be the highest level, the next tower placed will be\nthe next highest level available (which could be a jump from tier 10000 to tier 1.)\n\nTower formula:\n\nbasic:\n\nrange = 200\ndamage = 50 + tier*55\nprojectiles = 1 + Math.floor(tier/100) // additional proj every 100 tiers\nattack_speed = Math.max(1000 - tier, 250) // first once a second, increase attack speed for first 750 levels.\n\n\nmachine_gun:\n\nrange: 50,\ndamage: 2 + level*3,\nprojectiles: 100,\nspread_arc: PI/12 // 15 degree spread arc\n\n\nTODO:\n1. Store tower state in svelte store and serialize/deserialize tower position.\n  - Place towers in the correct position when refreshing the game.\n2. Track the amount of enemies that have been leaked through the TD.\n3. Use a factory to generate new turrets and add them to turret lists/map\n\n*/"],"names":[],"mappings":"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"}