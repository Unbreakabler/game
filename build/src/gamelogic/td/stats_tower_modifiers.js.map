{"version":3,"file":"stats_tower_modifiers.js","sources":["../../../../../src/gamelogic/td/stats_tower_modifiers.ts"],"sourcesContent":["import type { TowerCalculatedAttributes } from \"./stats_base_towers\"\n\nexport interface IIndexable<T = any> { [key: string]: T }\n\nexport type AttributeModifierIds = 'physical_1' | 'chain_1'\n\nexport interface SlotAttributeModifier {\n  damage_type?: string, // physical, elemental (specific elements?), chaos\n  damage?: CallableFunction,\n  range?: CallableFunction,\n  attack_speed?: CallableFunction,\n  projectiles?: CallableFunction, // NOT YET IMPLEMENTED\n  projectile_speed?: CallableFunction, // NOT YET IMPLEMENTED\n  area_of_effect_radius?: CallableFunction, // NOT YET IMPLEMENTED\n  spread_angle?: CallableFunction, // NOT YET IMPLEMENTED\n  // Maybe some graphical stuff? change the size of the projectile, etc?\n  projectile_modifiers?: CallableFunction | SlotProjectileModifier[],\n}\n\nexport interface SlotProjectileModifier {\n  chains?: integer, // Number of enemies a projectile will bounce between\n  aoe?: AoeRange[], // A list of Aoe Ranges, this allows a tower do 100% damage in the inner 100 yards, and 50% in the next 100, etc.\n  // status effects?\n  slow?: SlowStatusEffect,\n  stun_duration?: integer, // duration that an enemies speed is set to 0 + a stun indicator\n}\n\n// Might be easier to indicate two ranges. The maximum range that deals maximum damage, and the range where the aoe does 0 damge.\n// Then we can taper from 100% to 0% between that range.\ninterface AoeRange {\n  radius: number,\n  damage_multiplier: number, // 0 to 1\n}\n\ninterface SlowStatusEffect {\n  speed_multiplier: number, // 0 (not moving)  to 1 (normal speed)\n  duration: integer,\n}\n\nconst PhysicalDamageModifier: SlotAttributeModifier = {\n  damage: (current_damage: number, attribute_level: integer) => Math.floor(current_damage * (1 + attribute_level * 0.1)),\n}\n\nconst ChainProjectileModifier: SlotAttributeModifier = {\n  projectile_modifiers: (attribute_level: integer) => { return [{ chains: 1 + Math.floor(attribute_level/10) }] }\n}\n\nexport const SLOT_ATTRIBUTE_LIBRARY: { [k in AttributeModifierIds]: SlotAttributeModifier } = {\n  physical_1: PhysicalDamageModifier,\n  chain_1: ChainProjectileModifier\n}\n\nexport const applyTowerAttributeModifiers = (attributes: TowerCalculatedAttributes, attribute_modifier_ids: {id: AttributeModifierIds, level: integer}[]) => {\n  const modifiers = attribute_modifier_ids.map(attr => {\n    return {\n      mod: SLOT_ATTRIBUTE_LIBRARY[attr.id],\n      level: attr.level,\n    }\n  })\n\n  modifiers.forEach(({ mod, level }) => {\n    for (const [key, val] of Object.entries(mod)) {\n      let attr = (attributes as IIndexable)[key]\n      if (attr) (attributes as IIndexable)[key] = typeof val === 'function' ? val(attr, level) : attr\n\n      if (key === 'projectile_modifiers') {\n        attributes[key] = typeof val === 'function' ? val(level) : val\n      }\n    }\n  })\n\n  return attributes\n}\n\n"],"names":[],"mappings":"AAuCA,MAAM,sBAAsB,GAA0B;IACpD,MAAM,EAAE,CAAC,cAAsB,EAAE,eAAwB,KAAK,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,CAAC,GAAG,eAAe,GAAG,GAAG,CAAC,CAAC;CACvH,CAAA;AAED,MAAM,uBAAuB,GAA0B;IACrD,oBAAoB,EAAE,CAAC,eAAwB,OAAO,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAAC,EAAE,CAAC,EAAE,CAAC,CAAA,EAAE;CAChH,CAAA;MAEY,sBAAsB,GAA2D;IAC5F,UAAU,EAAE,sBAAsB;IAClC,OAAO,EAAE,uBAAuB;EACjC;MAEY,4BAA4B,GAAG,CAAC,UAAqC,EAAE,sBAAoE;IACtJ,MAAM,SAAS,GAAG,sBAAsB,CAAC,GAAG,CAAC,IAAI;QAC/C,OAAO;YACL,GAAG,EAAE,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACpC,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAA;KACF,CAAC,CAAA;IAEF,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE;QAC/B,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YAC5C,IAAI,IAAI,GAAI,UAAyB,CAAC,GAAG,CAAC,CAAA;YAC1C,IAAI,IAAI;gBAAG,UAAyB,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK,UAAU,GAAG,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,IAAI,CAAA;YAE/F,IAAI,GAAG,KAAK,sBAAsB,EAAE;gBAClC,UAAU,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAA;aAC/D;SACF;KACF,CAAC,CAAA;IAEF,OAAO,UAAU,CAAA;AACnB;;;;"}