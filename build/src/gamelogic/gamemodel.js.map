{"version":3,"file":"gamemodel.js","sources":["../../../../src/gamelogic/gamemodel.ts"],"sourcesContent":["import { writable } from \"svelte/store\";\nimport { loadSaveGame } from \"./saveloadfunctions\";\n\nclass SavedJob {\n  public current_level: number = 0;\n  public max_level_reached: number = 0;\n  public current_exp: number = 0;\n}\n\n/**\n * This class holds any data that needs to be saved when the player saves their game.\n * It should only be used for values that must be saved. Anything transient should go directly on the GameModel.\n */\nexport class SaveData {\n  // Used to hold the current money the player has, initialized at 0\n  public money: number = 0;\n\n  // Used to hold when the game was last saved, needed to calculate offline progress\n  public lastSaved: number = 0;\n\n  public jobs: { [job_id: number]: SavedJob } = {\n    1: { current_level: 1, max_level_reached: 0, current_exp: 0 },\n    2: { current_level: 1, max_level_reached: 0, current_exp: 0 },\n  };\n}\n\n/**\n * This class holds the data the game needs to function.\n * It will be accessible from anywhere in the game using svelte stores.\n */\nexport class GameModel {\n  public saveData: SaveData;\n\n  public constructor() {\n    // when we first create the game model we need to load any save data from localstorage\n    this.saveData = loadSaveGame();\n  }\n\n  /**\n   * Add money to the save data\n   * @param value Amount of money to add\n   */\n  public addMoney(value: number): void {\n    if (!isNaN(value)) {\n      this.saveData.money += value;\n    }\n  }\n\n  /**\n   * Takes money from the save data.\n   * Returns true if there was enough money, false if not.\n   * @param value Amount of money to spend\n   */\n  public spendMoney(value: number): boolean {\n    if (!isNaN(value) && this.saveData.money >= value) {\n      this.saveData.money -= value;\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\n * A writable store of the gameModel that can be accessed from other parts of the application.\n */\nexport const gameModel = writable(new GameModel());\n\n/**\n * A function that can be called anywhere to update the game model in the svelte store.\n * This will trigger the svelte components to re-evaluate and update their content.\n */\nexport function updateGameModel(): void {\n  gameModel.update((m) => (m = m));\n}\n"],"names":[],"mappings":";;;AASA;;;;MAIa,QAAQ;IAArB;;QAES,UAAK,GAAW,CAAC,CAAC;;QAGlB,cAAS,GAAW,CAAC,CAAC;QAEtB,SAAI,GAAmC;YAC5C,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE;YAC7D,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE,iBAAiB,EAAE,CAAC,EAAE,WAAW,EAAE,CAAC,EAAE;SAC9D,CAAC;KACH;CAAA;AAED;;;;MAIa,SAAS;IAGpB;;QAEE,IAAI,CAAC,QAAQ,GAAG,YAAY,EAAE,CAAC;KAChC;;;;;IAMM,QAAQ,CAAC,KAAa;QAC3B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,CAAC;SAC9B;KACF;;;;;;IAOM,UAAU,CAAC,KAAa;QAC7B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,EAAE;YACjD,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,CAAC;YAC7B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KACd;CACF;AAED;;;MAGa,SAAS,GAAG,QAAQ,CAAC,IAAI,SAAS,EAAE,EAAE;AAEnD;;;;SAIgB,eAAe;IAC7B,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC;;;;"}