{"version":3,"file":"td.js","sources":["../../../../src/scenes/td.ts"],"sourcesContent":["import \"phaser\";\n\nimport { GameModel, gameModel } from \"../gamelogic/gamemodel\";\n\nimport type { SelectionCursor, TowerId, TowerType } from \"../gamelogic/td/tower_defense\";\nimport { Path } from \"./entities/path\";\nimport { WaveManager } from \"./wave_manager\";\n\nimport Tower from \"./entities/towers/tower\";\nimport generate_animations from \"./setup/setup_animations\";\nimport setup_image_assets from \"./setup/setup_image_assets\";\n\ntype Selection = {\n  type: TowerType;\n  id: TowerId;\n  cursor: SelectionCursor;\n} | null;\n\nlet gameModelInstance: GameModel;\ngameModel.subscribe((m) => (gameModelInstance = m));\n\nexport default class TD extends Phaser.Scene {\n  public path!: Path;\n  public path_border!: Path;\n  public wave_manager!: WaveManager;\n\n  public selection: Selection = null;\n  public prev_selection: Selection = null;\n\n  public new_tower_map: Map<string, Tower> = new Map<string, Tower>();\n\n  private slots: Array<string | null> = [];\n\n  public constructor() {\n    super({ key: \"td\", active: true });\n  }\n\n  public preload(): void {\n    setup_image_assets(this);\n  }\n\n  public create(): void {\n    generate_animations(this);\n\n    this.drawPath();\n    this.wave_manager = new WaveManager(this, this.path);\n\n    this.bindTowerModels();\n  }\n\n  private bindTowerModels() {\n    gameModelInstance.tower_defense.slots.forEach(slot_id => {\n      if (slot_id) {\n        const tower = gameModelInstance.tower_defense.getTower(slot_id);\n        if (tower) {\n          const new_tower = new Tower(this, tower);\n          if (tower.status.is_placed) {\n            new_tower.place(tower.status.x, tower.status.y);\n          }\n          this.new_tower_map.set(tower.status.id, new_tower)\n        }\n      } \n    })\n  }\n\n\n  private drawPath(): void {\n    const points: integer[][] = [\n      [185, -132],\n      [185, 450],\n      [950, 450],\n      [950, 180],\n      [575, 180],\n      [575, 960],\n      [185, 960],\n      [185, 700],\n      [1670, 700],\n      [1670, 1080],\n    ];\n    // TODO(jon): Would be nice to include the path points in the map json or a related file.\n    this.path = new Path(this, points);\n    const map = this.add.tilemap('map');\n    const tileset = map.addTilesetImage('towerDefense_tilesheet@2', 'tiles');\n    const grass = map.createLayer('Grass', tileset)\n    const path = map.createLayer('Path', tileset)\n    const plants = map.createLayer('Plants', tileset)\n    grass.setScale(0.5, 0.5)\n    path.setScale(0.5, 0.5)  \n    plants.setScale(0.5, 0.5)\n  }\n\n  public update(time: number, delta: number): void {\n    if (gameModelInstance.tower_defense.time_multiplier === 0) {\n      this.physics.pause();\n    } else if (this.physics){\n      this.physics.resume();\n    }\n\n    for (let i = 0; i < gameModelInstance.tower_defense.time_multiplier; i++) {\n      this.physics.world.step(delta / 1000);\n      this.wave_manager.update(time, delta)\n      this.new_tower_map.forEach(t => t.update(time, delta));\n    }\n\n    this.updateSelectionHandling();\n  }\n\n  private updateSelectionHandling() {\n    // Selection handling - Should be moved into the tower class\n    this.selection = gameModelInstance.tower_defense.selection;\n    let tower, prev_tower\n    if (this.selection) {\n      tower = this.new_tower_map.get(this.selection.id);\n    }\n    if (this.prev_selection) {\n      prev_tower = this.new_tower_map.get(this.prev_selection.id);\n    }\n\n    if (tower?.is_placeable) {\n      tower.setVisible(true);\n      tower.setPosition(this.game.input.activePointer.x, this.game.input.activePointer.y)\n    }\n    \n    if (!this.selection) {\n      if (tower) tower.selection = undefined;\n      if (prev_tower) prev_tower.selection = undefined;\n    } else {\n      if (tower !== prev_tower) {\n        if (tower) {\n          tower.selection = 'selected';\n        }\n        if (prev_tower) {\n          prev_tower.selection = undefined;\n          if (!prev_tower.is_placed) {\n            prev_tower.setVisible(false);\n          }\n        }\n      }\n    }\n\n    this.prev_selection = this.selection\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAkBA,IAAI,iBAA4B,CAAC;AACjC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;MAE/B,EAAG,SAAQ,MAAM,CAAC,KAAK;IAY1C;QACE,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAR9B,cAAS,GAAc,IAAI,CAAC;QAC5B,mBAAc,GAAc,IAAI,CAAC;QAEjC,kBAAa,GAAuB,IAAI,GAAG,EAAiB,CAAC;QAE5D,UAAK,GAAyB,EAAE,CAAC;KAIxC;IAEM,OAAO;QACZ,kBAAkB,CAAC,IAAI,CAAC,CAAC;KAC1B;IAEM,MAAM;QACX,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAErD,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;IAEO,eAAe;QACrB,iBAAiB,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO;YACnD,IAAI,OAAO,EAAE;gBACX,MAAM,KAAK,GAAG,iBAAiB,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAChE,IAAI,KAAK,EAAE;oBACT,MAAM,SAAS,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;oBACzC,IAAI,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE;wBAC1B,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACjD;oBACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;iBACnD;aACF;SACF,CAAC,CAAA;KACH;IAGO,QAAQ;QACd,MAAM,MAAM,GAAgB;YAC1B,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;YACX,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,GAAG,EAAE,GAAG,CAAC;YACV,CAAC,IAAI,EAAE,GAAG,CAAC;YACX,CAAC,IAAI,EAAE,IAAI,CAAC;SACb,CAAC;;QAEF,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACnC,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,OAAO,GAAG,GAAG,CAAC,eAAe,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC;QACzE,MAAM,KAAK,GAAG,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAC/C,MAAM,IAAI,GAAG,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;QAC7C,MAAM,MAAM,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;QACjD,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;QACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;QACvB,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;KAC1B;IAEM,MAAM,CAAC,IAAY,EAAE,KAAa;QACvC,IAAI,iBAAiB,CAAC,aAAa,CAAC,eAAe,KAAK,CAAC,EAAE;YACzD,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SACtB;aAAM,IAAI,IAAI,CAAC,OAAO,EAAC;YACtB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;SACvB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE;YACxE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAA;YACrC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACxD;QAED,IAAI,CAAC,uBAAuB,EAAE,CAAC;KAChC;IAEO,uBAAuB;;QAE7B,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC,aAAa,CAAC,SAAS,CAAC;QAC3D,IAAI,KAAK,EAAE,UAAU,CAAA;QACrB,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;SACnD;QACD,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;SAC7D;QAED,IAAI,KAAK,EAAE,YAAY,EAAE;YACvB,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACvB,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAA;SACpF;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,KAAK;gBAAE,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;YACvC,IAAI,UAAU;gBAAE,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;SAClD;aAAM;YACL,IAAI,KAAK,KAAK,UAAU,EAAE;gBACxB,IAAI,KAAK,EAAE;oBACT,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC;iBAC9B;gBACD,IAAI,UAAU,EAAE;oBACd,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;oBACjC,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;wBACzB,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;qBAC9B;iBACF;aACF;SACF;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,SAAS,CAAA;KACrC;;;;;"}