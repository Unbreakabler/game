import { SvelteComponent, init, safe_not_equal, element, append, attr, toggle_class, insert, listen, noop, detach, text, set_style } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/components/tower_slot.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-171g2rz-style";
	style.textContent = "div.svelte-171g2rz{display:flex;flex-direction:column;justify-content:center;align-items:center}.selectable.svelte-171g2rz{cursor:pointer}button.svelte-171g2rz{border:none;height:75px;width:75px;background-repeat:no-repeat;background-size:contain}.selected.svelte-171g2rz{background-color:lightblue}.item.svelte-171g2rz{position:relative;width:75px;height:75px}";
	append(document.head, style);
}

// (25:32) 
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("X");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (23:2) {#if isTower(tower_info)}
function create_if_block(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			set_style(button, "background-image", "url(static/tower/turrets/" + /*tower_info*/ ctx[0].status.type + ".png)");
			attr(button, "class", "svelte-171g2rz");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*tower_info*/ 1) {
				set_style(button, "background-image", "url(static/tower/turrets/" + /*tower_info*/ ctx[0].status.type + ".png)");
			}
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let show_if;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (show_if == null || dirty & /*tower_info*/ 1) show_if = !!isTower(/*tower_info*/ ctx[0]);
		if (show_if) return create_if_block;
		if (/*tower_info*/ ctx[0] === null) return create_if_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "item svelte-171g2rz");
			toggle_class(div, "selected", /*tower_id*/ ctx[1] && /*selection_id*/ ctx[2] === /*tower_id*/ ctx[1]);
			toggle_class(div, "selectable", /*tower_info*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (dirty & /*tower_id, selection_id*/ 6) {
				toggle_class(div, "selected", /*tower_id*/ ctx[1] && /*selection_id*/ ctx[2] === /*tower_id*/ ctx[1]);
			}

			if (dirty & /*tower_info*/ 1) {
				toggle_class(div, "selectable", /*tower_info*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function isTower(tower) {
	return tower ? tower.status.tier !== undefined : false;
}

function instance($$self, $$props, $$invalidate) {
	let selection_id;
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(4, gameModelInstance = m));

	const toggleTowerSelection = tower_id => {
		if (tower_id && gameModelInstance.tower_defense.selection?.id != tower_id) {
			gameModelInstance.tower_defense.setSelection(tower_id);
		} else {
			$$invalidate(4, gameModelInstance.tower_defense.selection = null, gameModelInstance);
		}
	};

	let { tower_info } = $$props;
	let { tower_id } = $$props;
	const click_handler = () => toggleTowerSelection(tower_id);

	$$self.$$set = $$props => {
		if ("tower_info" in $$props) $$invalidate(0, tower_info = $$props.tower_info);
		if ("tower_id" in $$props) $$invalidate(1, tower_id = $$props.tower_id);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(2, selection_id = gameModelInstance.tower_defense.selection?.id || null);
		}
	};

	return [
		tower_info,
		tower_id,
		selection_id,
		toggleTowerSelection,
		gameModelInstance,
		click_handler
	];
}

class Tower_slot extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-171g2rz-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { tower_info: 0, tower_id: 1 });
	}
}

export default Tower_slot;
//# sourceMappingURL=tower_slot.svelte.js.map
