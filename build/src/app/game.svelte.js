import { SvelteComponent, init, safe_not_equal, element, append, space, create_component, attr, insert, mount_component, noop, transition_in, transition_out, detach, destroy_component, onMount, binding_callbacks } from '../../node_modules/svelte/internal/index.mjs.js';
import '../../node_modules/phaser/dist/phaser.js';
import Slot_controls from '../components/slot_controls.svelte.js';
import Tower_details from '../components/tower_details.svelte.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import Main from '../scenes/main.js';
import TD from '../scenes/td.js';

/* src/app/game.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1spt8rc-style";
	style.textContent = "canvas.svelte-1spt8rc{width:800px;height:600px}div.svelte-1spt8rc{width:800px;display:flex;flex-direction:column;justify-content:center}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let canvas_1;
	let t0;
	let slotcontrols;
	let t1;
	let towerdetails;
	let current;
	slotcontrols = new Slot_controls({});
	towerdetails = new Tower_details({});

	return {
		c() {
			div = element("div");
			canvas_1 = element("canvas");
			t0 = space();
			create_component(slotcontrols.$$.fragment);
			t1 = space();
			create_component(towerdetails.$$.fragment);
			attr(canvas_1, "id", "game-container");
			attr(canvas_1, "class", "svelte-1spt8rc");
			attr(div, "class", "svelte-1spt8rc");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, canvas_1);
			/*canvas_1_binding*/ ctx[1](canvas_1);
			append(div, t0);
			mount_component(slotcontrols, div, null);
			append(div, t1);
			mount_component(towerdetails, div, null);
			current = true;
		},
		p: noop,
		i(local) {
			if (current) return;
			transition_in(slotcontrols.$$.fragment, local);
			transition_in(towerdetails.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(slotcontrols.$$.fragment, local);
			transition_out(towerdetails.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*canvas_1_binding*/ ctx[1](null);
			destroy_component(slotcontrols);
			destroy_component(towerdetails);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let canvas;
	gameModel.subscribe(m => m);

	onMount(() => {
		const config = {
			type: Phaser.WEBGL,
			width: 800,
			height: 600,
			physics: { default: "arcade" },
			canvas,
			scene: [TD, Main]
		};

		new Phaser.Game(config);
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			canvas = $$value;
			$$invalidate(0, canvas);
		});
	}

	return [canvas, canvas_1_binding];
}

class Game extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1spt8rc-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Game;
//# sourceMappingURL=game.svelte.js.map
