import { SvelteComponent, init, safe_not_equal, element, attr, set_style, toggle_class, insert, add_render_callback, create_bidirectional_transition, detach } from '../../../../svelte/internal/index.mjs.js';
import { slide } from '../../../../svelte/transition/index.mjs.js';
import utils from '../../utils/classes.js';

/* node_modules/smelte/src/components/Tabs/Indicator.svelte generated by Svelte v3.32.1 */

function create_fragment(ctx) {
	let div;
	let div_transition;
	let current;

	return {
		c() {
			div = element("div");
			attr(div, "class", "absolute bottom-0 left-0 transition " + /*bg*/ ctx[2](700));
			set_style(div, "width", /*width*/ ctx[0] + "px");
			set_style(div, "left", /*left*/ ctx[1] + "px");
			set_style(div, "height", "2px");
			toggle_class(div, "hidden", /*left*/ ctx[1] < 0);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*width*/ 1) {
				set_style(div, "width", /*width*/ ctx[0] + "px");
			}

			if (!current || dirty & /*left*/ 2) {
				set_style(div, "left", /*left*/ ctx[1] + "px");
			}

			if (dirty & /*left*/ 2) {
				toggle_class(div, "hidden", /*left*/ ctx[1] < 0);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { width = 0 } = $$props;
	let { left = 0 } = $$props;
	let { color = "primary" } = $$props;
	const { bg } = utils(color);

	$$self.$$set = $$props => {
		if ("width" in $$props) $$invalidate(0, width = $$props.width);
		if ("left" in $$props) $$invalidate(1, left = $$props.left);
		if ("color" in $$props) $$invalidate(3, color = $$props.color);
	};

	return [width, left, bg, color];
}

class Indicator extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { width: 0, left: 1, color: 3 });
	}
}

export default Indicator;
//# sourceMappingURL=Indicator.svelte.js.map
