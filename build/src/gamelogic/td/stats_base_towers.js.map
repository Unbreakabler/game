{"version":3,"file":"stats_base_towers.js","sources":["../../../../../src/gamelogic/td/stats_base_towers.ts"],"sourcesContent":["import type { TowerStatus, TowerType } from './tower_defense'\n\nexport interface TowerAttributes {\n  damage: CallableFunction | number,\n  range: CallableFunction | number,\n  attack_speed: CallableFunction | number,\n  projectiles: CallableFunction | number, // NOT YET IMPLEMENTED\n  area_of_effect_radius: CallableFunction | number, // NOT YET IMPLEMENTED\n  spread_angle: CallableFunction | number, // NOT YET IMPLEMENTED\n}\n\nexport interface TowerCalculatedAttributes { \n  damage: number,\n  range: number,\n  attack_speed: number,\n  projectiles: number, // NOT YET IMPLEMENTED\n  projectile_speed: number, // NOT YET IMPLEMENTED\n  area_of_effect_radius: number, // NOT YET IMPLEMENTED\n  spread_angle: number, // NOT YET IMPLEMENTED\n}\n\ntype BaseTowerAttributes = {\n  [k in TowerType]: TowerAttributes\n}\n\n\nconst BASE_TOWER_ATTRIBUTES: BaseTowerAttributes = {\n  basic: {\n    range: 200,\n    damage: (tier: number) => 50 + tier*55,\n    attack_speed: (tier: number) => Math.max(1000 - tier*10, 25),\n    projectiles: (tier: number) => 1 + Math.floor(tier/10),\n    spread_angle: 0,\n    area_of_effect_radius: 0,\n  },\n  machine_gun: {\n    range: 150,\n    damage: (tier: number) => 3 + tier*3, \n    attack_speed: 100,\n    projectiles: 1,\n    spread_angle: Math.PI/12, // 15 degree spread (not currently used)\n    area_of_effect_radius: 0,\n  }\n}\n\n/**\n * \n * @param tower_status \n * @returns TowerAttributes Calculated attributes for a given tower type/tier\n */\nexport const getTowerAttributes = (tower_status: TowerStatus): TowerCalculatedAttributes => {\n  const base_attributes = BASE_TOWER_ATTRIBUTES[tower_status.type]\n  let res: any = {}\n  for (const [key, val] of Object.entries(base_attributes)) {\n    res[key] = typeof val === 'function' ? val(tower_status.tier) : val\n  }\n  // console.log('getTowerAttributes', res)\n  return res as TowerCalculatedAttributes\n}"],"names":[],"mappings":"AA0BA,MAAM,qBAAqB,GAAwB;IACjD,KAAK,EAAE;QACL,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,CAAC,IAAY,KAAK,EAAE,GAAG,IAAI,GAAC,EAAE;QACtC,YAAY,EAAE,CAAC,IAAY,KAAK,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,GAAC,EAAE,EAAE,EAAE,CAAC;QAC5D,WAAW,EAAE,CAAC,IAAY,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAC,EAAE,CAAC;QACtD,YAAY,EAAE,CAAC;QACf,qBAAqB,EAAE,CAAC;KACzB;IACD,WAAW,EAAE;QACX,KAAK,EAAE,GAAG;QACV,MAAM,EAAE,CAAC,IAAY,KAAK,CAAC,GAAG,IAAI,GAAC,CAAC;QACpC,YAAY,EAAE,GAAG;QACjB,WAAW,EAAE,CAAC;QACd,YAAY,EAAE,IAAI,CAAC,EAAE,GAAC,EAAE;QACxB,qBAAqB,EAAE,CAAC;KACzB;CACF,CAAA;AAED;;;;;MAKa,kBAAkB,GAAG,CAAC,YAAyB;IAC1D,MAAM,eAAe,GAAG,qBAAqB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;IAChE,IAAI,GAAG,GAAQ,EAAE,CAAA;IACjB,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;QACxD,GAAG,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,KAAK,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,CAAA;KACpE;;IAED,OAAO,GAAgC,CAAA;AACzC;;;;"}