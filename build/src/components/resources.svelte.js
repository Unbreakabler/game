import { SvelteComponent, init, safe_not_equal, element, append, text, space, create_component, attr, insert, mount_component, set_data, transition_in, transition_out, detach, destroy_component } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import { saveToStorage, resetSaveGame } from '../gamelogic/util/saveloadfunctions.js';
import { formatNumber } from '../gamelogic/util/utils.js';
import Button from '../../node_modules/smelte/src/components/Button/Button.svelte.js';

/* src/components/resources.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-qanmur-style";
	style.textContent = ".resource-container.svelte-qanmur{display:flex;flex-flow:row wrap;justify-content:space-between;padding:5px}.money.svelte-qanmur{width:300px;padding:10px}.coin.svelte-qanmur{width:15px;height:15px;background-color:rgb(221, 184, 67);display:inline-block;border-radius:100px;box-shadow:1px 1px}";
	append(document.head, style);
}

// (25:4) <Button color="secondary" on:click={saveGame}>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text("Save");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (26:4) <Button color="secondary" on:click={hardReset}>
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text("Hard Reset");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div1;
	let t0;
	let t1;
	let div0;
	let t2;
	let div2;
	let button0;
	let t3;
	let button1;
	let current;

	button0 = new Button({
			props: {
				color: "secondary",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*saveGame*/ ctx[1]);

	button1 = new Button({
			props: {
				color: "secondary",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*hardReset*/ ctx[2]);

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			t0 = text(/*money*/ ctx[0]);
			t1 = space();
			div0 = element("div");
			t2 = space();
			div2 = element("div");
			create_component(button0.$$.fragment);
			t3 = space();
			create_component(button1.$$.fragment);
			attr(div0, "class", "coin svelte-qanmur");
			attr(div1, "class", "money bg-secondary-400 whitespace-nowrap svelte-qanmur");
			attr(div2, "class", "whitespace-nowrap");
			attr(div3, "class", "resource-container bg-secondary-400 svelte-qanmur");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, t0);
			append(div1, t1);
			append(div1, div0);
			append(div3, t2);
			append(div3, div2);
			mount_component(button0, div2, null);
			append(div2, t3);
			mount_component(button1, div2, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*money*/ 1) set_data(t0, /*money*/ ctx[0]);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 16) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 16) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let money;
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(3, gameModelInstance = m));

	function saveGame() {
		saveToStorage(gameModelInstance);
	}

	function hardReset() {
		if (window.confirm("You will lose all progress. Are you sure?")) {
			resetSaveGame();
			saveGame();
		}
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 8) {
			 $$invalidate(0, money = formatNumber(gameModelInstance.wallet.money, 2));
		}
	};

	return [money, saveGame, hardReset, gameModelInstance];
}

class Resources extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-qanmur-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Resources;
//# sourceMappingURL=resources.svelte.js.map
