import { SvelteComponent, init, safe_not_equal, element, append, space, attr, toggle_class, insert, add_render_callback, create_bidirectional_transition, detach, onMount } from '../../../../svelte/internal/index.mjs.js';
import { slide } from '../../../../svelte/transition/index.mjs.js';

/* node_modules/smelte/src/components/ProgressLinear/ProgressLinear.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-mguqwa-style";
	style.textContent = ".inc.svelte-mguqwa{animation:svelte-mguqwa-increase 2s ease-in-out infinite}.dec.svelte-mguqwa{animation:svelte-mguqwa-decrease 2s 0.9s ease-in-out infinite}@keyframes svelte-mguqwa-increase{from{left:-5%;width:5%}to{left:130%;width:150%}}@keyframes svelte-mguqwa-decrease{from{left:-90%;width:90%}to{left:110%;width:10%}}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let div0_class_value;
	let div0_style_value;
	let t;
	let div1;
	let div1_class_value;
	let div2_class_value;
	let div2_transition;
	let current;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			t = space();
			div1 = element("div");
			attr(div0, "class", div0_class_value = "bg-" + /*color*/ ctx[2] + "-500 h-1 absolute" + " svelte-mguqwa");

			attr(div0, "style", div0_style_value = /*progress*/ ctx[1]
			? `width: ${/*progress*/ ctx[1]}%`
			: "");

			toggle_class(div0, "inc", !/*progress*/ ctx[1]);
			toggle_class(div0, "transition", /*progress*/ ctx[1]);
			attr(div1, "class", div1_class_value = "bg-" + /*color*/ ctx[2] + "-500 h-1 absolute dec" + " svelte-mguqwa");
			toggle_class(div1, "hidden", /*progress*/ ctx[1]);
			attr(div2, "class", div2_class_value = "top-0 left-0 w-full h-1 bg-" + /*color*/ ctx[2] + "-100 overflow-hidden relative" + " svelte-mguqwa");
			toggle_class(div2, "fixed", /*app*/ ctx[0]);
			toggle_class(div2, "z-50", /*app*/ ctx[0]);
			toggle_class(div2, "hidden", /*app*/ ctx[0] && !/*initialized*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div2, t);
			append(div2, div1);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*color*/ 4 && div0_class_value !== (div0_class_value = "bg-" + /*color*/ ctx[2] + "-500 h-1 absolute" + " svelte-mguqwa")) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty & /*progress*/ 2 && div0_style_value !== (div0_style_value = /*progress*/ ctx[1]
			? `width: ${/*progress*/ ctx[1]}%`
			: "")) {
				attr(div0, "style", div0_style_value);
			}

			if (dirty & /*color, progress*/ 6) {
				toggle_class(div0, "inc", !/*progress*/ ctx[1]);
			}

			if (dirty & /*color, progress*/ 6) {
				toggle_class(div0, "transition", /*progress*/ ctx[1]);
			}

			if (!current || dirty & /*color*/ 4 && div1_class_value !== (div1_class_value = "bg-" + /*color*/ ctx[2] + "-500 h-1 absolute dec" + " svelte-mguqwa")) {
				attr(div1, "class", div1_class_value);
			}

			if (dirty & /*color, progress*/ 6) {
				toggle_class(div1, "hidden", /*progress*/ ctx[1]);
			}

			if (!current || dirty & /*color*/ 4 && div2_class_value !== (div2_class_value = "top-0 left-0 w-full h-1 bg-" + /*color*/ ctx[2] + "-100 overflow-hidden relative" + " svelte-mguqwa")) {
				attr(div2, "class", div2_class_value);
			}

			if (dirty & /*color, app*/ 5) {
				toggle_class(div2, "fixed", /*app*/ ctx[0]);
			}

			if (dirty & /*color, app*/ 5) {
				toggle_class(div2, "z-50", /*app*/ ctx[0]);
			}

			if (dirty & /*color, app, initialized*/ 13) {
				toggle_class(div2, "hidden", /*app*/ ctx[0] && !/*initialized*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, { duration: 300 }, true);
				div2_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, { duration: 300 }, false);
			div2_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			if (detaching && div2_transition) div2_transition.end();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { app = false } = $$props;
	let { progress = 0 } = $$props;
	let { color = "primary" } = $$props;
	let initialized = false;

	onMount(() => {
		if (!app) return;

		setTimeout(
			() => {
				$$invalidate(3, initialized = true);
			},
			200
		);
	});

	$$self.$$set = $$props => {
		if ("app" in $$props) $$invalidate(0, app = $$props.app);
		if ("progress" in $$props) $$invalidate(1, progress = $$props.progress);
		if ("color" in $$props) $$invalidate(2, color = $$props.color);
	};

	return [app, progress, color, initialized];
}

class ProgressLinear extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-mguqwa-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { app: 0, progress: 1, color: 2 });
	}
}

export default ProgressLinear;
//# sourceMappingURL=ProgressLinear.svelte.js.map
