import { SvelteComponent, init, safe_not_equal, empty, insert, group_outros, transition_out, check_outros, transition_in, detach, assign, exclude_internal_props, bubble, create_component, mount_component, destroy_component, create_slot, element, space, set_attributes, append, action_destroyer, listen, update_slot, get_spread_update, run_all, text, set_data } from '../../../../svelte/internal/index.mjs.js';
import Icon from '../Icon/Icon.svelte.js';
import utils, { ClassBuilder, filterProps } from '../../utils/classes.js';
import r from '../Ripple/ripple.js';

/* node_modules/smelte/src/components/Button/Button.svelte generated by Svelte v3.32.1 */

function create_else_block(ctx) {
	let button;
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[3] && create_if_block_2(ctx);
	const default_slot_template = /*#slots*/ ctx[34].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	let button_levels = [
		{ class: /*classes*/ ctx[1] },
		/*props*/ ctx[9],
		{ type: /*type*/ ctx[6] },
		{ disabled: /*disabled*/ ctx[2] }
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(button, button_data);
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(/*ripple*/ ctx[8].call(null, button)),
					listen(button, "click", /*click_handler_3*/ ctx[42]),
					listen(button, "click", /*click_handler_1*/ ctx[38]),
					listen(button, "mouseover", /*mouseover_handler_1*/ ctx[39]),
					listen(button, "*", /*_handler_1*/ ctx[40])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[43], dirty, null, null);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty[0] & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				/*props*/ ctx[9],
				(!current || dirty[0] & /*type*/ 64) && { type: /*type*/ ctx[6] },
				(!current || dirty[0] & /*disabled*/ 4) && { disabled: /*disabled*/ ctx[2] }
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (131:0) {#if href}
function create_if_block(ctx) {
	let a;
	let button;
	let t;
	let current;
	let mounted;
	let dispose;
	let if_block = /*icon*/ ctx[3] && create_if_block_1(ctx);
	const default_slot_template = /*#slots*/ ctx[34].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[43], null);

	let button_levels = [
		{ class: /*classes*/ ctx[1] },
		/*props*/ ctx[9],
		{ type: /*type*/ ctx[6] },
		{ disabled: /*disabled*/ ctx[2] }
	];

	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	let a_levels = [{ href: /*href*/ ctx[5] }, /*props*/ ctx[9]];
	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	return {
		c() {
			a = element("a");
			button = element("button");
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
			set_attributes(button, button_data);
			set_attributes(a, a_data);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, button);
			if (if_block) if_block.m(button, null);
			append(button, t);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					action_destroyer(/*ripple*/ ctx[8].call(null, button)),
					listen(button, "click", /*click_handler_2*/ ctx[41]),
					listen(button, "click", /*click_handler*/ ctx[35]),
					listen(button, "mouseover", /*mouseover_handler*/ ctx[36]),
					listen(button, "*", /*_handler*/ ctx[37])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*icon*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, t);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && dirty[1] & /*$$scope*/ 4096) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[43], dirty, null, null);
				}
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				(!current || dirty[0] & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
				/*props*/ ctx[9],
				(!current || dirty[0] & /*type*/ 64) && { type: /*type*/ ctx[6] },
				(!current || dirty[0] & /*disabled*/ 4) && { disabled: /*disabled*/ ctx[2] }
			]));

			set_attributes(a, a_data = get_spread_update(a_levels, [
				(!current || dirty[0] & /*href*/ 32) && { href: /*href*/ ctx[5] },
				/*props*/ ctx[9]
			]));
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d();
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (165:4) {#if icon}
function create_if_block_2(ctx) {
	let icon_1;
	let current;

	icon_1 = new Icon({
			props: {
				class: /*iClasses*/ ctx[7],
				small: /*small*/ ctx[4],
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(icon_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icon_1_changes = {};
			if (dirty[0] & /*iClasses*/ 128) icon_1_changes.class = /*iClasses*/ ctx[7];
			if (dirty[0] & /*small*/ 16) icon_1_changes.small = /*small*/ ctx[4];

			if (dirty[0] & /*icon*/ 8 | dirty[1] & /*$$scope*/ 4096) {
				icon_1_changes.$$scope = { dirty, ctx };
			}

			icon_1.$set(icon_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon_1, detaching);
		}
	};
}

// (166:6) <Icon class={iClasses} {small}>
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*icon*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*icon*/ 8) set_data(t, /*icon*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (147:6) {#if icon}
function create_if_block_1(ctx) {
	let icon_1;
	let current;

	icon_1 = new Icon({
			props: {
				class: /*iClasses*/ ctx[7],
				small: /*small*/ ctx[4],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(icon_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(icon_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const icon_1_changes = {};
			if (dirty[0] & /*iClasses*/ 128) icon_1_changes.class = /*iClasses*/ ctx[7];
			if (dirty[0] & /*small*/ 16) icon_1_changes.small = /*small*/ ctx[4];

			if (dirty[0] & /*icon*/ 8 | dirty[1] & /*$$scope*/ 4096) {
				icon_1_changes.$$scope = { dirty, ctx };
			}

			icon_1.$set(icon_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(icon_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(icon_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(icon_1, detaching);
		}
	};
}

// (148:8) <Icon class={iClasses} {small}>
function create_default_slot(ctx) {
	let t;

	return {
		c() {
			t = text(/*icon*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*icon*/ 8) set_data(t, /*icon*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

const classesDefault = "z-10 py-2 px-4 uppercase text-sm font-medium relative overflow-hidden";
const basicDefault = "text-white duration-200 ease-in";
const outlinedDefault = "bg-transparent border border-solid";
const textDefault = "bg-transparent border-none px-4 hover:bg-transparent";
const iconDefault = "p-4 flex items-center select-none";
const fabDefault = "hover:bg-transparent";
const smallDefault = "pt-1 pb-1 pl-2 pr-2 text-xs";
const disabledDefault = "bg-gray-300 text-gray-500 dark:bg-dark-400 pointer-events-none hover:bg-gray-300 cursor-default";
const elevationDefault = "hover:shadow shadow";

function instance($$self, $$props, $$invalidate) {
	let normal;
	let lighter;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { value = false } = $$props;
	let { outlined = false } = $$props;
	let { text = false } = $$props;
	let { block = false } = $$props;
	let { disabled = false } = $$props;
	let { icon = null } = $$props;
	let { small = false } = $$props;
	let { light = false } = $$props;
	let { dark = false } = $$props;
	let { flat = false } = $$props;
	let { iconClass = "" } = $$props;
	let { color = "primary" } = $$props;
	let { href = null } = $$props;
	let { fab = false } = $$props;
	let { type = "button" } = $$props;
	let { remove = "" } = $$props;
	let { add = "" } = $$props;
	let { replace = {} } = $$props;
	let { classes = classesDefault } = $$props;
	let { basicClasses = basicDefault } = $$props;
	let { outlinedClasses = outlinedDefault } = $$props;
	let { textClasses = textDefault } = $$props;
	let { iconClasses = iconDefault } = $$props;
	let { fabClasses = fabDefault } = $$props;
	let { smallClasses = smallDefault } = $$props;
	let { disabledClasses = disabledDefault } = $$props;
	let { elevationClasses = elevationDefault } = $$props;
	fab = fab || text && icon;
	const basic = !outlined && !text && !fab;
	const elevation = (basic || icon) && !disabled && !flat && !text;
	let iClasses = i => i;
	let shade = 0;
	const { bg, border, txt } = utils(color);
	const cb = new ClassBuilder(classes, classesDefault);
	let iconCb;

	if (icon) {
		iconCb = new ClassBuilder(iconClass);
	}

	const ripple = r(text || fab || outlined ? color : "white");

	const props = filterProps(
		[
			"outlined",
			"text",
			"color",
			"block",
			"disabled",
			"icon",
			"small",
			"light",
			"dark",
			"flat",
			"add",
			"remove",
			"replace"
		],
		$$props
	);

	function click_handler(event) {
		bubble($$self, event);
	}

	function mouseover_handler(event) {
		bubble($$self, event);
	}

	function _handler(event) {
		bubble($$self, event);
	}

	function click_handler_1(event) {
		bubble($$self, event);
	}

	function mouseover_handler_1(event) {
		bubble($$self, event);
	}

	function _handler_1(event) {
		bubble($$self, event);
	}

	const click_handler_2 = () => $$invalidate(0, value = !value);
	const click_handler_3 = () => $$invalidate(0, value = !value);

	$$self.$$set = $$new_props => {
		$$invalidate(51, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("value" in $$new_props) $$invalidate(0, value = $$new_props.value);
		if ("outlined" in $$new_props) $$invalidate(11, outlined = $$new_props.outlined);
		if ("text" in $$new_props) $$invalidate(12, text = $$new_props.text);
		if ("block" in $$new_props) $$invalidate(13, block = $$new_props.block);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("icon" in $$new_props) $$invalidate(3, icon = $$new_props.icon);
		if ("small" in $$new_props) $$invalidate(4, small = $$new_props.small);
		if ("light" in $$new_props) $$invalidate(14, light = $$new_props.light);
		if ("dark" in $$new_props) $$invalidate(15, dark = $$new_props.dark);
		if ("flat" in $$new_props) $$invalidate(16, flat = $$new_props.flat);
		if ("iconClass" in $$new_props) $$invalidate(17, iconClass = $$new_props.iconClass);
		if ("color" in $$new_props) $$invalidate(18, color = $$new_props.color);
		if ("href" in $$new_props) $$invalidate(5, href = $$new_props.href);
		if ("fab" in $$new_props) $$invalidate(10, fab = $$new_props.fab);
		if ("type" in $$new_props) $$invalidate(6, type = $$new_props.type);
		if ("remove" in $$new_props) $$invalidate(19, remove = $$new_props.remove);
		if ("add" in $$new_props) $$invalidate(20, add = $$new_props.add);
		if ("replace" in $$new_props) $$invalidate(21, replace = $$new_props.replace);
		if ("classes" in $$new_props) $$invalidate(1, classes = $$new_props.classes);
		if ("basicClasses" in $$new_props) $$invalidate(22, basicClasses = $$new_props.basicClasses);
		if ("outlinedClasses" in $$new_props) $$invalidate(23, outlinedClasses = $$new_props.outlinedClasses);
		if ("textClasses" in $$new_props) $$invalidate(24, textClasses = $$new_props.textClasses);
		if ("iconClasses" in $$new_props) $$invalidate(25, iconClasses = $$new_props.iconClasses);
		if ("fabClasses" in $$new_props) $$invalidate(26, fabClasses = $$new_props.fabClasses);
		if ("smallClasses" in $$new_props) $$invalidate(27, smallClasses = $$new_props.smallClasses);
		if ("disabledClasses" in $$new_props) $$invalidate(28, disabledClasses = $$new_props.disabledClasses);
		if ("elevationClasses" in $$new_props) $$invalidate(29, elevationClasses = $$new_props.elevationClasses);
		if ("$$scope" in $$new_props) $$invalidate(43, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*light, dark, shade*/ 1073790976) {
			 {
				$$invalidate(30, shade = light ? 200 : 0);
				$$invalidate(30, shade = dark ? -400 : shade);
			}
		}

		if ($$self.$$.dirty[0] & /*shade*/ 1073741824) {
			 $$invalidate(32, normal = 500 - shade);
		}

		if ($$self.$$.dirty[0] & /*shade*/ 1073741824) {
			 $$invalidate(33, lighter = 400 - shade);
		}

		 $$invalidate(1, classes = cb.flush().add(basicClasses, basic, basicDefault).add(`${bg(normal)} hover:${bg(lighter)}`, basic).add(elevationClasses, elevation, elevationDefault).add(outlinedClasses, outlined, outlinedDefault).add(`${border(lighter)} ${txt(normal)} hover:${bg("trans")} dark-hover:${bg("transDark")}`, outlined).add(`${txt(lighter)}`, text).add(textClasses, text, textDefault).add(iconClasses, icon, iconDefault).remove("py-2", icon).remove(txt(lighter), fab).add(disabledClasses, disabled, disabledDefault).add(smallClasses, small, smallDefault).add("flex items-center justify-center h-8 w-8", small && icon).add("border-solid", outlined).add("rounded-full", icon).add("w-full", block).add("rounded", basic || outlined || text).add("button", !icon).add(fabClasses, fab, fabDefault).add(`hover:${bg("transLight")}`, fab).add($$props.class).remove(remove).replace(replace).add(add).get());

		if ($$self.$$.dirty[0] & /*fab, iconClass*/ 132096 | $$self.$$.dirty[1] & /*iconCb*/ 1) {
			 if (iconCb) {
				$$invalidate(7, iClasses = iconCb.flush().add(txt(), fab && !iconClass).get());
			}
		}
	};

	$$props = exclude_internal_props($$props);

	return [
		value,
		classes,
		disabled,
		icon,
		small,
		href,
		type,
		iClasses,
		ripple,
		props,
		fab,
		outlined,
		text,
		block,
		light,
		dark,
		flat,
		iconClass,
		color,
		remove,
		add,
		replace,
		basicClasses,
		outlinedClasses,
		textClasses,
		iconClasses,
		fabClasses,
		smallClasses,
		disabledClasses,
		elevationClasses,
		shade,
		iconCb,
		normal,
		lighter,
		slots,
		click_handler,
		mouseover_handler,
		_handler,
		click_handler_1,
		mouseover_handler_1,
		_handler_1,
		click_handler_2,
		click_handler_3,
		$$scope
	];
}

class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				value: 0,
				outlined: 11,
				text: 12,
				block: 13,
				disabled: 2,
				icon: 3,
				small: 4,
				light: 14,
				dark: 15,
				flat: 16,
				iconClass: 17,
				color: 18,
				href: 5,
				fab: 10,
				type: 6,
				remove: 19,
				add: 20,
				replace: 21,
				classes: 1,
				basicClasses: 22,
				outlinedClasses: 23,
				textClasses: 24,
				iconClasses: 25,
				fabClasses: 26,
				smallClasses: 27,
				disabledClasses: 28,
				elevationClasses: 29
			},
			[-1, -1]
		);
	}
}

export default Button;
//# sourceMappingURL=Button.svelte.js.map
