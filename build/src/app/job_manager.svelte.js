import { SvelteComponent, init, safe_not_equal, create_component, claim_component, mount_component, transition_in, transition_out, destroy_component, component_subscribe } from '../../node_modules/svelte/internal/index.mjs.js';
import { count } from '../gamelogic/store.js';
import Progress_bar from '../components/progress_bar.svelte.js';

/* src/app/job_manager.svelte generated by Svelte v3.32.1 */

function create_fragment(ctx) {
	let progressbar;
	let current;
	progressbar = new Progress_bar({ props: { current: /*$count*/ ctx[0] } });

	return {
		c() {
			create_component(progressbar.$$.fragment);
		},
		l(nodes) {
			claim_component(progressbar.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(progressbar, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const progressbar_changes = {};
			if (dirty & /*$count*/ 1) progressbar_changes.current = /*$count*/ ctx[0];
			progressbar.$set(progressbar_changes);
		},
		i(local) {
			if (current) return;
			transition_in(progressbar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(progressbar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(progressbar, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $count;
	component_subscribe($$self, count, $$value => $$invalidate(0, $count = $$value));
	return [$count];
}

class Job_manager extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Job_manager;
//# sourceMappingURL=job_manager.svelte.js.map
