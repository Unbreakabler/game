import { SvelteComponent, init, safe_not_equal, create_slot, element, space, attr, insert, append, update_slot, transition_in, transition_out, detach, assign, exclude_internal_props } from '../../../../svelte/internal/index.mjs.js';
import { ClassBuilder } from '../../utils/classes.js';

/* node_modules/smelte/src/components/Card/Card.svelte generated by Svelte v3.32.1 */
const get_actions_slot_changes = dirty => ({});
const get_actions_slot_context = ctx => ({});
const get_text_slot_changes = dirty => ({});
const get_text_slot_context = ctx => ({});
const get_media_slot_changes = dirty => ({});
const get_media_slot_context = ctx => ({});
const get_title_slot_changes = dirty => ({});
const get_title_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;
	const title_slot_template = /*#slots*/ ctx[4].title;
	const title_slot = create_slot(title_slot_template, ctx, /*$$scope*/ ctx[3], get_title_slot_context);
	const media_slot_template = /*#slots*/ ctx[4].media;
	const media_slot = create_slot(media_slot_template, ctx, /*$$scope*/ ctx[3], get_media_slot_context);
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);
	const text_slot_template = /*#slots*/ ctx[4].text;
	const text_slot = create_slot(text_slot_template, ctx, /*$$scope*/ ctx[3], get_text_slot_context);
	const actions_slot_template = /*#slots*/ ctx[4].actions;
	const actions_slot = create_slot(actions_slot_template, ctx, /*$$scope*/ ctx[3], get_actions_slot_context);

	return {
		c() {
			div = element("div");
			if (title_slot) title_slot.c();
			t0 = space();
			if (media_slot) media_slot.c();
			t1 = space();
			if (default_slot) default_slot.c();
			t2 = space();
			if (text_slot) text_slot.c();
			t3 = space();
			if (actions_slot) actions_slot.c();
			attr(div, "class", /*c*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (title_slot) {
				title_slot.m(div, null);
			}

			append(div, t0);

			if (media_slot) {
				media_slot.m(div, null);
			}

			append(div, t1);

			if (default_slot) {
				default_slot.m(div, null);
			}

			append(div, t2);

			if (text_slot) {
				text_slot.m(div, null);
			}

			append(div, t3);

			if (actions_slot) {
				actions_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (title_slot) {
				if (title_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(title_slot, title_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_title_slot_changes, get_title_slot_context);
				}
			}

			if (media_slot) {
				if (media_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(media_slot, media_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_media_slot_changes, get_media_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (text_slot) {
				if (text_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(text_slot, text_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_text_slot_changes, get_text_slot_context);
				}
			}

			if (actions_slot) {
				if (actions_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(actions_slot, actions_slot_template, ctx, /*$$scope*/ ctx[3], dirty, get_actions_slot_changes, get_actions_slot_context);
				}
			}

			if (!current || dirty & /*c*/ 1) {
				attr(div, "class", /*c*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(title_slot, local);
			transition_in(media_slot, local);
			transition_in(default_slot, local);
			transition_in(text_slot, local);
			transition_in(actions_slot, local);
			current = true;
		},
		o(local) {
			transition_out(title_slot, local);
			transition_out(media_slot, local);
			transition_out(default_slot, local);
			transition_out(text_slot, local);
			transition_out(actions_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (title_slot) title_slot.d(detaching);
			if (media_slot) media_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (text_slot) text_slot.d(detaching);
			if (actions_slot) actions_slot.d(detaching);
		}
	};
}

const classesDefault = "rounded inline-flex flex-col overflow-hidden duration-200 ease-in";

function instance($$self, $$props, $$invalidate) {
	let c;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { hover = true } = $$props;
	let { classes = classesDefault } = $$props;
	const cb = new ClassBuilder(classes, classesDefault);

	$$self.$$set = $$new_props => {
		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("hover" in $$new_props) $$invalidate(1, hover = $$new_props.hover);
		if ("classes" in $$new_props) $$invalidate(2, classes = $$new_props.classes);
		if ("$$scope" in $$new_props) $$invalidate(3, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		 $$invalidate(0, c = cb.flush().add(`shadow-sm hover:shadow`, hover).add(classes, true, classesDefault).add($$props.class).get());
	};

	$$props = exclude_internal_props($$props);
	return [c, hover, classes, $$scope, slots];
}

class Card extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { hover: 1, classes: 2 });
	}
}

export default Card;
//# sourceMappingURL=Card.svelte.js.map
