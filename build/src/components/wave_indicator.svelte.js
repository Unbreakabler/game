import { SvelteComponent, init, safe_not_equal, element, append, text, space, attr, null_to_empty, insert, set_data, detach, destroy_each, noop } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/components/wave_indicator.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-fob1j-style";
	style.textContent = ".main.svelte-fob1j{display:flex;flex-direction:column}.indicator.svelte-fob1j{display:flex;flex-direction:column;height:600px;overflow-y:scroll;min-width:200px}.wave_type.svelte-fob1j{display:flex}.wave.svelte-fob1j{background:rgba(202, 202, 202, 0.521);padding:5px;margin:5px}.wave_normal.svelte-fob1j{color:#fff}.wave_magic.svelte-fob1j{color:blue}.wave_rare.svelte-fob1j{color:yellow}.green_knight.svelte-fob1j{display:inline-block;width:20px;height:32px;background-image:url('static/green_knight.png')}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (16:8) {#if wave.modifiers.length}
function create_if_block(ctx) {
	let span;
	let t;
	let each_value_1 = /*wave*/ ctx[2].modifiers;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			span = element("span");
			t = text("mods:\n            ");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "modifiers");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*waves*/ 1) {
				each_value_1 = /*wave*/ ctx[2].modifiers;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (19:12) {#each wave.modifiers as mod}
function create_each_block_1(ctx) {
	let t_value = /*mod*/ ctx[5].name + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*waves*/ 1 && t_value !== (t_value = /*mod*/ ctx[5].name + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (10:4) {#each waves as wave}
function create_each_block(ctx) {
	let div3;
	let div1;
	let t0_value = /*wave*/ ctx[2].enemy_type + "";
	let t0;
	let t1;
	let div0;
	let div0_class_value;
	let t2;
	let t3_value = /*wave*/ ctx[2].mob_count + "";
	let t3;
	let div1_class_value;
	let t4;
	let t5;
	let div2;
	let span0;
	let t6;
	let t7_value = /*wave*/ ctx[2].wave_difficulty + "";
	let t7;
	let t8;
	let span1;
	let t9;
	let t10_value = /*wave*/ ctx[2].mob_difficulty + "";
	let t10;
	let t11;
	let if_block = /*wave*/ ctx[2].modifiers.length && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			t0 = text(t0_value);
			t1 = text(" - ");
			div0 = element("div");
			t2 = text(" x ");
			t3 = text(t3_value);
			t4 = space();
			if (if_block) if_block.c();
			t5 = space();
			div2 = element("div");
			span0 = element("span");
			t6 = text("wave: ");
			t7 = text(t7_value);
			t8 = space();
			span1 = element("span");
			t9 = text("mob: ");
			t10 = text(t10_value);
			t11 = space();
			attr(div0, "class", div0_class_value = "" + (null_to_empty(/*wave*/ ctx[2].enemy_type) + " svelte-fob1j"));
			attr(div1, "class", div1_class_value = "wave_type wave_" + /*wave*/ ctx[2].wave_type + " svelte-fob1j");
			attr(span0, "class", "modifiers");
			attr(span1, "class", "modifiers");
			attr(div3, "class", "wave svelte-fob1j");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, t0);
			append(div1, t1);
			append(div1, div0);
			append(div1, t2);
			append(div1, t3);
			append(div3, t4);
			if (if_block) if_block.m(div3, null);
			append(div3, t5);
			append(div3, div2);
			append(div2, span0);
			append(span0, t6);
			append(span0, t7);
			append(div2, t8);
			append(div2, span1);
			append(span1, t9);
			append(span1, t10);
			append(div3, t11);
		},
		p(ctx, dirty) {
			if (dirty & /*waves*/ 1 && t0_value !== (t0_value = /*wave*/ ctx[2].enemy_type + "")) set_data(t0, t0_value);

			if (dirty & /*waves*/ 1 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*wave*/ ctx[2].enemy_type) + " svelte-fob1j"))) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty & /*waves*/ 1 && t3_value !== (t3_value = /*wave*/ ctx[2].mob_count + "")) set_data(t3, t3_value);

			if (dirty & /*waves*/ 1 && div1_class_value !== (div1_class_value = "wave_type wave_" + /*wave*/ ctx[2].wave_type + " svelte-fob1j")) {
				attr(div1, "class", div1_class_value);
			}

			if (/*wave*/ ctx[2].modifiers.length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div3, t5);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*waves*/ 1 && t7_value !== (t7_value = /*wave*/ ctx[2].wave_difficulty + "")) set_data(t7, t7_value);
			if (dirty & /*waves*/ 1 && t10_value !== (t10_value = /*wave*/ ctx[2].mob_difficulty + "")) set_data(t10, t10_value);
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let t;
	let div0;
	let each_value = /*waves*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			t = text("Next wave:\n  ");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "indicator svelte-fob1j");
			attr(div1, "class", "main svelte-fob1j");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, t);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*waves*/ 1) {
				each_value = /*waves*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let waves;
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(1, gameModelInstance = m));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 2) {
			 $$invalidate(0, waves = gameModelInstance.tower_defense.waves);
		}
	};

	return [waves, gameModelInstance];
}

class Wave_indicator extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-fob1j-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Wave_indicator;
//# sourceMappingURL=wave_indicator.svelte.js.map
