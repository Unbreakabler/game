import { SvelteComponent, init, safe_not_equal, element, space, text, attr, toggle_class, insert, append, set_data, noop, detach, assign, exclude_internal_props } from '../../../../svelte/internal/index.mjs.js';
import { ClassBuilder } from '../../utils/classes.js';

/* node_modules/smelte/src/components/Card/Title.svelte generated by Svelte v3.32.1 */

function create_fragment(ctx) {
	let div4;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let div1;
	let t1;
	let t2;
	let div2;
	let t3;

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			div1 = element("div");
			t1 = text(/*title*/ ctx[0]);
			t2 = space();
			div2 = element("div");
			t3 = text(/*subheader*/ ctx[1]);
			attr(img, "class", "rounded-full");
			attr(img, "width", "44");
			attr(img, "height", "44");
			if (img.src !== (img_src_value = /*avatar*/ ctx[2])) attr(img, "src", img_src_value);
			attr(img, "alt", "avatar");
			toggle_class(img, "hidden", !/*avatar*/ ctx[2]);
			attr(div1, "class", "font-medium text-lg");
			toggle_class(div1, "hidden", !/*title*/ ctx[0]);
			attr(div2, "class", "text-sm text-gray-600 pt-0");
			toggle_class(div2, "hidden", !/*subheader*/ ctx[1]);
			attr(div3, "class", "pl-4 py-2");
			attr(div4, "class", /*c*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div0, img);
			append(div4, t0);
			append(div4, div3);
			append(div3, div1);
			append(div1, t1);
			append(div3, t2);
			append(div3, div2);
			append(div2, t3);
		},
		p(ctx, [dirty]) {
			if (dirty & /*avatar*/ 4 && img.src !== (img_src_value = /*avatar*/ ctx[2])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*avatar*/ 4) {
				toggle_class(img, "hidden", !/*avatar*/ ctx[2]);
			}

			if (dirty & /*title*/ 1) set_data(t1, /*title*/ ctx[0]);

			if (dirty & /*title*/ 1) {
				toggle_class(div1, "hidden", !/*title*/ ctx[0]);
			}

			if (dirty & /*subheader*/ 2) set_data(t3, /*subheader*/ ctx[1]);

			if (dirty & /*subheader*/ 2) {
				toggle_class(div2, "hidden", !/*subheader*/ ctx[1]);
			}

			if (dirty & /*c*/ 8) {
				attr(div4, "class", /*c*/ ctx[3]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div4);
		}
	};
}

const classesDefault = "flex px-4 py-2 items-center";

function instance($$self, $$props, $$invalidate) {
	let c;
	const hover = true;
	let { title = "" } = $$props;
	let { subheader = "" } = $$props;
	let { avatar = "" } = $$props;
	let { classes = classesDefault } = $$props;
	const cb = new ClassBuilder(classes, classesDefault);

	$$self.$$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("title" in $$new_props) $$invalidate(0, title = $$new_props.title);
		if ("subheader" in $$new_props) $$invalidate(1, subheader = $$new_props.subheader);
		if ("avatar" in $$new_props) $$invalidate(2, avatar = $$new_props.avatar);
		if ("classes" in $$new_props) $$invalidate(5, classes = $$new_props.classes);
	};

	$$self.$$.update = () => {
		 $$invalidate(3, c = cb.flush().add(classes, true, classesDefault).add($$props.class).get());
	};

	$$props = exclude_internal_props($$props);
	return [title, subheader, avatar, c, hover, classes];
}

class Title extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			hover: 4,
			title: 0,
			subheader: 1,
			avatar: 2,
			classes: 5
		});
	}

	get hover() {
		return this.$$.ctx[4];
	}
}

export default Title;
//# sourceMappingURL=Title.svelte.js.map
