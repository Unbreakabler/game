{"version":3,"file":"saveloadfunctions.js","sources":["../../../../../src/gamelogic/util/saveloadfunctions.ts"],"sourcesContent":["import { GameModel, gameModel, updateGameModel } from \"../gamemodel\";\n// import { compress, decompress } from 'lz-string';\n\n/**\n * This is the key the save data will be stored under inside localstorage\n */\nconst storageName = \"sveltedata\";\n\n/**\n * Load the save data from localstorage.\n * If no data is found just return a new SaveData with default values.\n */\nexport function loadFromStorage(): GameModel {\n  // using a try/catch in case this fails for some reason\n  try {\n    // see if data exists first\n    const uncompressed_saved_data = localStorage.getItem(storageName);\n    if (uncompressed_saved_data) {\n      // get data from localstorage, decompress it using lz-string, then parse it back into a javascript object\n      // const decompressed_state = decompress(uncompressed_saved_data)\n      const decompressed_state = uncompressed_saved_data;\n      if (decompressed_state) {\n        const game_model = GameModel.loadFromSave(decompressed_state);\n        console.log(\"Save loaded:\");\n        console.log(game_model);\n\n        return game_model;\n      }\n    }\n  } catch (error) {\n    console.error(error); // log the error so at least we can see it\n  }\n  // if nothing in storage, or an error occurs, create a new state (for now)\n  return new GameModel();\n}\n\n/**\n * Saves the data to localstorage\n * @param saveData SaveData\n */\nexport function saveToStorage(game_model: GameModel): void {\n  try {\n    // Use JSON.stringify to turn the object into a string, then compress with lz-string,\n    // before setting it in localstorage\n    // localStorage.setItem(storageName, compress(JSON.stringify(saveData)));\n    localStorage.setItem(storageName, game_model.exportToSave());\n  } catch (error) {\n    console.error(error); // log the error so at least we can see it\n  }\n}\n\n/**\n * Resets save game in localstorage and resets the gameModel\n */\nexport function resetSaveGame(): void {\n  // remove from local storage\n  localStorage.removeItem(storageName);\n\n  // update the stored gameModel with a new one\n  gameModel.update((g) => (g = new GameModel()));\n}\n"],"names":[],"mappings":";;AACA;AAEA;;;AAGA,MAAM,WAAW,GAAG,YAAY,CAAC;AAEjC;;;;SAIgB,eAAe;;IAE7B,IAAI;;QAEF,MAAM,uBAAuB,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAClE,IAAI,uBAAuB,EAAE;;;YAG3B,MAAM,kBAAkB,GAAG,uBAAuB,CAAC;YACnD,IAAI,kBAAkB,EAAE;gBACtB,MAAM,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;gBAC9D,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAExB,OAAO,UAAU,CAAC;aACnB;SACF;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACtB;;IAED,OAAO,IAAI,SAAS,EAAE,CAAC;AACzB,CAAC;AAED;;;;SAIgB,aAAa,CAAC,UAAqB;IACjD,IAAI;;;;QAIF,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC;KAC9D;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KACtB;AACH,CAAC;AAED;;;SAGgB,aAAa;;IAE3B,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;;IAGrC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAU,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC;AACjD;;;;"}