import { SvelteComponent, init, safe_not_equal, element, append, empty, insert, group_outros, transition_out, check_outros, transition_in, detach, space, attr, destroy_each, text, set_data, noop, create_component, mount_component, destroy_component } from '../../node_modules/svelte/internal/index.mjs.js';
import Farm_job from '../components/farm_job.svelte.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/app/farm.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1xzhl4s-style";
	style.textContent = "header.svelte-1xzhl4s{display:flex}div.svelte-1xzhl4s{flex:1}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (20:2) {:else}
function create_else_block(ctx) {
	let row;
	let div;
	let t;
	let each_value_1 = /*job*/ ctx[2].requirements;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			row = element("row");
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(div, "class", "svelte-1xzhl4s");
		},
		m(target, anchor) {
			insert(target, row, anchor);
			append(row, div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append(row, t);
		},
		p(ctx, dirty) {
			if (dirty & /*jobs, gameModelInstance*/ 3) {
				each_value_1 = /*job*/ ctx[2].requirements;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(row);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (18:2) {#if job.areRequirementsMet(gameModelInstance.achievables)}
function create_if_block(ctx) {
	let farmjobcomponenent;
	let current;
	farmjobcomponenent = new Farm_job({ props: { job: /*job*/ ctx[2] } });

	return {
		c() {
			create_component(farmjobcomponenent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(farmjobcomponenent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const farmjobcomponenent_changes = {};
			if (dirty & /*jobs*/ 2) farmjobcomponenent_changes.job = /*job*/ ctx[2];
			farmjobcomponenent.$set(farmjobcomponenent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(farmjobcomponenent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(farmjobcomponenent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(farmjobcomponenent, detaching);
		}
	};
}

// (23:8) {#each job.requirements as r}
function create_each_block_1(ctx) {
	let t0;
	let t1_value = /*gameModelInstance*/ ctx[0].achievables.get(/*r*/ ctx[5].achievable_name).getDisplayName() + "";
	let t1;
	let t2;
	let t3_value = /*r*/ ctx[5].level_required + "";
	let t3;

	return {
		c() {
			t0 = text("Requires ");
			t1 = text(t1_value);
			t2 = text(" level ");
			t3 = text(t3_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
			insert(target, t3, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*gameModelInstance, jobs*/ 3 && t1_value !== (t1_value = /*gameModelInstance*/ ctx[0].achievables.get(/*r*/ ctx[5].achievable_name).getDisplayName() + "")) set_data(t1, t1_value);
			if (dirty & /*jobs*/ 2 && t3_value !== (t3_value = /*r*/ ctx[5].level_required + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
			if (detaching) detach(t3);
		}
	};
}

// (17:0) {#each jobs as job}
function create_each_block(ctx) {
	let show_if;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*jobs, gameModelInstance*/ 3) show_if = !!/*job*/ ctx[2].areRequirementsMet(/*gameModelInstance*/ ctx[0].achievables);
		if (show_if) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let header;
	let t9;
	let each_1_anchor;
	let current;
	let each_value = /*jobs*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			header = element("header");

			header.innerHTML = `<div class="svelte-1xzhl4s">Name</div> 
  <div class="svelte-1xzhl4s">Current Level</div> 
  <div class="svelte-1xzhl4s">Income</div> 
  <div class="svelte-1xzhl4s">Required Xp</div> 
  <div class="svelte-1xzhl4s">Max level Reached</div>`;

			t9 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			attr(header, "class", "svelte-1xzhl4s");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			insert(target, t9, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*jobs, gameModelInstance*/ 3) {
				each_value = /*jobs*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			if (detaching) detach(t9);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let jobs;
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(0, gameModelInstance = m));

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 1) {
			 $$invalidate(1, jobs = Array.from(gameModelInstance.farm_jobs.values()));
		}
	};

	return [gameModelInstance, jobs];
}

class Farm extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1xzhl4s-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Farm;
//# sourceMappingURL=farm.svelte.js.map
