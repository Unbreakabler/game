import { SvelteComponent, init, element, append, safe_not_equal, empty, insert, transition_in, transition_out, check_outros, create_component, mount_component, detach, destroy_component, space, attr, update_keyed_each, group_outros, outro_and_destroy_block } from '../../node_modules/svelte/internal/index.mjs.js';
import Resources from '../components/resources.svelte.js';
import Tabs from '../components/tabs.svelte.js';
import Blacksmith from './blacksmith.svelte.js';
import Game from './game.svelte.js';
import Farm from './farm.svelte.js';
import Village from './village.svelte.js';
import Workshop from './workshop.svelte.js';

/* src/app/app.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1pc9jru-style";
	style.textContent = ".main-container.svelte-1pc9jru{display:flex;flex-direction:column;height:100%}.game-container.svelte-1pc9jru{display:flex;flex:1}@media only screen and (max-width: 1200px){.game-container.svelte-1pc9jru{flex-direction:column}}.menu.svelte-1pc9jru{display:flex;flex-direction:column;flex:1\n  }";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i][0];
	child_ctx[4] = list[i][1];
	return child_ctx;
}

// (26:8) {#if url === key}
function create_if_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = /*val*/ ctx[4];

	function switch_props(ctx) {
		return { props: { class: "tab" } };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props());
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (switch_value !== (switch_value = /*val*/ ctx[4])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props());
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (25:6) {#each Object.entries(routes) as [key, val] (key)}
function create_each_block(key_1, ctx) {
	let first;
	let if_block_anchor;
	let current;
	let if_block = /*url*/ ctx[0] === /*key*/ ctx[3] && create_if_block(ctx);

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*url*/ ctx[0] === /*key*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*url*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let resources;
	let t0;
	let div1;
	let div0;
	let tabs;
	let t1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t2;
	let game;
	let current;
	resources = new Resources({});
	tabs = new Tabs({ props: { goto: /*goto*/ ctx[1] } });
	let each_value = Object.entries(/*routes*/ ctx[2]);
	const get_key = ctx => /*key*/ ctx[3];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	game = new Game({});

	return {
		c() {
			div2 = element("div");
			create_component(resources.$$.fragment);
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			create_component(tabs.$$.fragment);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			create_component(game.$$.fragment);
			attr(div0, "class", "menu svelte-1pc9jru");
			attr(div1, "class", "game-container svelte-1pc9jru");
			attr(div2, "class", "main-container svelte-1pc9jru");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			mount_component(resources, div2, null);
			append(div2, t0);
			append(div2, div1);
			append(div1, div0);
			mount_component(tabs, div0, null);
			append(div0, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div1, t2);
			mount_component(game, div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, routes, url*/ 5) {
				each_value = Object.entries(/*routes*/ ctx[2]);
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div0, outro_and_destroy_block, create_each_block, null, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(resources.$$.fragment, local);
			transition_in(tabs.$$.fragment, local);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(game.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(resources.$$.fragment, local);
			transition_out(tabs.$$.fragment, local);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(game.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(resources);
			destroy_component(tabs);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			destroy_component(game);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let url = "/";

	const goto = path => {
		$$invalidate(0, url = path);
	};

	const routes = {
		"/": Village,
		"/farm": Farm,
		"/workshop": Workshop,
		"/blacksmith": Blacksmith
	};

	return [url, goto, routes];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1pc9jru-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;
//# sourceMappingURL=app.svelte.js.map
