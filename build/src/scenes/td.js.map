{"version":3,"file":"td.js","sources":["../../../../src/scenes/td.ts"],"sourcesContent":["import \"phaser\";\n\nimport { GameModel, gameModel } from \"../gamelogic/gamemodel\";\n\nimport type Enemy from \"./entities/enemies/enemy\";\nimport type Bullet from \"./entities/tower_bullet\";\n\nimport Turret from \"./entities/towers/turret\";\nimport type { SelectionCursor, TowerId, TowerType } from \"../gamelogic/td/tower_defense\";\nimport { Path } from \"./entities/path\";\nimport { WaveManager } from \"./wave_manager\";\n\ntype Selection = {\n  type: TowerType;\n  id: string;\n  cursor: SelectionCursor;\n} | null;\n\nlet gameModelInstance: GameModel;\ngameModel.subscribe((m) => (gameModelInstance = m));\n\nexport default class TD extends Phaser.Scene {\n  public path!: Path;\n  public path_border!: Path;\n  private bg_sprite!: Phaser.GameObjects.TileSprite;\n  private path_sprite!: Phaser.GameObjects.TileSprite;\n  private path_border_sprite!: Phaser.GameObjects.TileSprite;\n  public wave_manager!: WaveManager;\n\n  public selection: {\n    type: TowerType;\n    id: string;\n    cursor: SelectionCursor;\n  } | null = null;\n  public selected_turret: Turret | null = null;\n\n  private slots: Array<string | null> = [];\n  public tower_map: Map<string, Turret> = new Map<string, Turret>();\n\n  public constructor() {\n    super({ key: \"td\", active: true });\n  }\n\n  public preload(): void {\n    this.load.image(\"basic\", \"static/shotgun.png\");\n    this.load.image(\"machine_gun\", \"static/machine_gun.png\");\n    this.load.image(\"small_bullet\", \"static/small_bullet.png\");\n    this.load.image(\"dirt0\", \"static/dirt0.png\");\n    this.load.image(\"grass0\", \"static/grass0.png\");\n    this.load.image(\"sand0\", \"static/sand0.png\");\n    this.load.spritesheet(\"green_knight\", \"static/green_knight.png\", {\n      frameWidth: 20,\n      frameHeight: 30,\n    });\n  }\n\n  public create(): void {\n    this.generateAnimations();\n    this.drawPath();\n\n    this.setupWaveManager();\n    this.setupInputHandlers();\n    this.setupTurrets();\n    this.setupSelectionSubscription();\n  }\n\n  private generateAnimations(): void {\n    // Set up animations\n    this.anims.create({\n      key: \"green_knight-walking-down\",\n      frames: this.anims.generateFrameNames(\"green_knight\", { start: 0, end: 3 }),\n      frameRate: 3,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"green_knight-walking-right\",\n      frames: this.anims.generateFrameNames(\"green_knight\", { start: 4, end: 7 }),\n      frameRate: 3,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"green_knight-walking-left\",\n      frames: this.anims.generateFrameNames(\"green_knight\", { start: 8, end: 11 }),\n      frameRate: 3,\n      repeat: -1,\n    });\n    this.anims.create({\n      key: \"green_knight-walking-up\",\n      frames: this.anims.generateFrameNames(\"green_knight\", { start: 12, end: 15 }),\n      frameRate: 3,\n      repeat: -1,\n    });\n  }\n\n  private drawPath(): void {\n    const points: integer[][] = [\n      [96, -32],\n      [96, 264],\n      [500, 264],\n      [500, 114],\n      [300, 114],\n      [300, 514],\n      [96, 514],\n      [96, 380],\n      [850, 380],\n    ];\n\n    this.path = new Path(this, points);\n    this.path_border = new Path(this, points, 34);\n\n    this.bg_sprite = this.add.tileSprite(0, 0, 800, 600, \"grass0\");\n    this.bg_sprite.setOrigin(0, 0);\n    this.path_border_sprite = this.add.tileSprite(0, 0, 800, 600, \"sand0\");\n    this.path_border_sprite.setOrigin(0, 0);\n    this.path_sprite = this.add.tileSprite(0, 0, 800, 600, \"dirt0\");\n    this.path_sprite.setOrigin(0, 0);\n    this.path_sprite.setMask(this.path.graphics.createGeometryMask());\n    this.path_border_sprite.setMask(this.path_border.graphics.createGeometryMask());\n  }\n\n  private setupTurrets(): void {\n    // Subscribe to model.tower_defense.slots\n    // For each id, generate a \"turret\" using the tower_info from tower_maps,\n    // This can happen on initial launch to replace turrets if is_placed is true;\n    // Store this list of tower_ids -> turret game objects in a hashmap in td.ts;\n    const unsubscribe_store = gameModel.subscribe((model) => {\n      model.tower_defense.slots.forEach((model_tower_id, index) => {\n        const phaser_slot_tower_id = this.slots[index];\n        if (model_tower_id && model_tower_id !== this.slots[index]) {\n          // tower was added to slot\n          const tower_info = model.tower_defense.getTower(model_tower_id);\n          if (tower_info) {\n            const new_turret = new Turret(this, model_tower_id, tower_info.status.x, tower_info.status.y, tower_info.status.type);\n            if (tower_info.status.is_placed) {\n              this.add.existing(new_turret);\n              new_turret.place(tower_info.status.x, tower_info.status.y);\n            }\n            this.tower_map.set(model_tower_id, new_turret);\n          }\n        } else if (phaser_slot_tower_id && !model_tower_id) {\n          // slot was cleared from the bar, destroy tower\n          const turret_to_delete = this.tower_map.get(phaser_slot_tower_id);\n          if (this.selected_turret == turret_to_delete) {\n            this.selected_turret = null;\n          }\n          turret_to_delete?.destroy();\n        }\n      });\n      this.slots = model.tower_defense.slots;\n    });\n    this.events.on(\"destroy\", function () {\n      unsubscribe_store();\n    });\n  }\n\n  private setupSelectionSubscription(): void {\n    // Subscribe to model.tower_defense.selection\n    // When the selection changes from null -> Selection,\n    // set the selected tower by finding it in the hashmap by id.\n    // if it's not placed, allow it to be placed, otherwise \"highlight\" the turret.\n    let cur_selection: Selection = null;\n    const unsubscribe_store = gameModel.subscribe((model) => {\n      if (cur_selection !== model.tower_defense.selection) {\n        // Selection changed\n        cur_selection = model.tower_defense.selection;\n        const new_selection_tower_info = model.tower_defense.getTower(cur_selection?.id as TowerId || \"\");\n        const active_selection_tower_info = model.tower_defense.getTower(this.selection?.id as TowerId || \"\");\n        if (cur_selection && this.selection !== cur_selection) {\n          // New selection, deselect previously selected turret\n          this.selected_turret?.select(false);\n\n          // Hide turret and deselect before updating selection, this allows the user to toggle\n          // between multiple unplaced turrets\n          if (this.selection && active_selection_tower_info?.status.is_placed == false) {\n            this.selected_turret?.setVisible(false);\n            this.selected_turret = null;\n            this.selection = null;\n          }\n\n          // Update selection\n          this.selection = cur_selection;\n          if (new_selection_tower_info?.status.is_placed) {\n            // selecting tower already placed, highlight range\n            // Allows a user to select a tower to see details or take actions\n            console.log(\"SELECT PLACED TURRET\");\n            this.selection.cursor = \"selected\";\n            this.selected_turret = this.tower_map.get(this.selection.id) || null;\n            this.selected_turret?.select(true);\n          } else {\n            // selecting a tower that is not yet placed, make placeable\n            // Allows a user to select a tower for placement\n            console.log(\"SELECT UNPLACED TURRET\");\n            this.selection.cursor = \"placement\";\n            this.selected_turret = this.tower_map.get(this.selection.id) || null;\n            if (this.selected_turret) {\n              this.add.existing(this.selected_turret);\n              this.selected_turret.setVisible(false);\n            }\n          }\n        } else if (cur_selection && this.selection === cur_selection) {\n          // reselecting - i don't think this ever happens, you can only toggle selection currently.\n          console.log(\"RESELECT TURRET\");\n        } else if (!cur_selection && this.selection && active_selection_tower_info?.status.is_placed == false) {\n          // deselecting unplaced turret, hide gameobject\n          // Allows a user to unselect a turret that is currently on their cursor for placement\n          console.log('DESELECT UNPLACED TURRET')\n          this.selected_turret?.select(false);\n          this.selected_turret?.setVisible(false);\n          this.selected_turret = null;\n          this.selection = null;\n        } else if (!cur_selection && this.selection && active_selection_tower_info?.status.is_placed) {\n          // Deselecting a turret that is already placed\n          // Allows a user to deselect a placed turret that was selected to highlight range or take action\n          console.log(\"DESELECT PLACED TURRET\");\n          this.selected_turret?.select(false);\n          this.selected_turret = null;\n          this.selection = null;\n        }\n      }\n    });\n    this.events.on(\"destroy\", function () {\n      unsubscribe_store();\n    });\n  }\n\n  private setupWaveManager(): void {\n    this.wave_manager = new WaveManager(this, this.path);\n  }\n\n  private setupInputHandlers(): void {\n    // Place turrets on click, this will be changed to be a drag/drop from a tower menu\n    this.input.on(\"pointerdown\", this.selectUnderCursor.bind(this));\n    this.input.on(\"pointerdown\", this.placeTurret.bind(this));\n    this.input.on('pointermove', this.checkUnderCursor.bind(this));\n    this.input.on('pointermove', this.testTurretPlacement.bind(this));\n  }\n\n  public update(time: number, delta: number): void {\n    this.tower_map.forEach((tower) => tower.update(time, delta));\n\n    // wave manager\n    // if waves.length < 10, generate a new wave\n    // take the oldest wave (next up) and start it in the wave manager\n    // wave manager creates the enemies, spawns them on the path, and watches for wave completion\n    // once all enemies in the wave are destroyed, repeat.\n    // wave manager will subscribe to the tower defense svelte store and manage the waves itself.\n    this.wave_manager.update(time, delta)\n  }\n\n  public checkUnderCursor(pointer: Phaser.Input.Pointer, game_objects_under_pointer: Phaser.GameObjects.GameObject[]) {\n    if (game_objects_under_pointer.length) {\n      // change cursor to hand\n      document.body.style.cursor = 'pointer';\n    } else {\n      document.body.style.cursor = 'auto';\n      // pointer\n    }\n    this.testTurretPlacement(pointer)\n  }\n\n  public testTurretPlacement(pointer: Phaser.Input.Pointer) {\n    if (!this.selection || this.selection.cursor !== 'placement' || !this.selected_turret) return;\n    this.selected_turret.setVisible(true);\n    this.selected_turret.select();\n    this.selected_turret.x = pointer.x;\n    this.selected_turret.y = pointer.y;\n  }\n\n  public placeTurret(pointer: Phaser.Input.Pointer, game_objects_under_pointer: Phaser.GameObjects.GameObject[]): boolean {\n    if (!this.selection || this.selection.cursor !== \"placement\" || !this.selected_turret) return false;\n    const place_x = Math.floor(pointer.x);\n    const place_y = Math.floor(pointer.y);\n\n    const t = this.selected_turret;\n    if (!t.place(place_x, place_y)) {\n      return false;\n    }\n    if (this.selection) {\n      gameModelInstance.tower_defense.placeTower(this.selection.id as TowerId, place_x, place_y);\n    }\n    this.selection = null;\n    gameModelInstance.tower_defense.selection = null;\n    return true;\n  }\n\n  public selectUnderCursor(pointer: Phaser.Input.Pointer, game_objects_under_pointer: Phaser.GameObjects.GameObject[]) {\n    if (!game_objects_under_pointer.length) gameModelInstance.tower_defense.setSelection(null)\n    game_objects_under_pointer.forEach(g => {\n      if (g.hasOwnProperty('tower_id')) {\n        gameModelInstance.tower_defense.setSelection((g as Turret).tower_id as TowerId)\n      }\n    })\n  }\n\n  public damageEnemy(enemy: Enemy, bullet: Bullet): void {\n    // only if both enemy and bullet are alive\n    if (enemy.active === true && bullet.active === true) {\n      // decrease the enemy hp with BULLET_DAMAGE\n      const bullet_damage = bullet.hit();\n      gameModelInstance.tower_defense.recordTowerDamage(bullet.tower_id, bullet_damage)\n      const still_alive = enemy.receiveDamage(bullet_damage);\n      if (still_alive) return\n      gameModelInstance.tower_defense.recordTowerKill(bullet.tower_id, enemy.name)\n      gameModelInstance.tower_defense.current_wave_info.alive--;\n    }\n  }\n}\n"],"names":[],"mappings":"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"}