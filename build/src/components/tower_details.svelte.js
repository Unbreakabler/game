import { SvelteComponent, init, safe_not_equal, element, space, text, attr, insert, append, set_data, detach, empty, noop } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/components/tower_details.svelte generated by Svelte v3.32.1 */

function create_if_block(ctx) {
	let div4;
	let div0;
	let t0;
	let div1;
	let t1_value = /*tower_info*/ ctx[0].type + "";
	let t1;
	let t2;
	let div2;
	let t3;
	let t4;
	let t5;
	let div3;
	let t6;
	let t7_value = /*tower_info*/ ctx[0].attack_speed + "";
	let t7;

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text(t1_value);
			t2 = space();
			div2 = element("div");
			t3 = text("dps: ");
			t4 = text(/*dps*/ ctx[1]);
			t5 = space();
			div3 = element("div");
			t6 = text("attack time: ");
			t7 = text(t7_value);
			attr(div0, "class", "description svelte-1a4o6e3");
			attr(div4, "class", "details svelte-1a4o6e3");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div4, t0);
			append(div4, div1);
			append(div1, t1);
			append(div4, t2);
			append(div4, div2);
			append(div2, t3);
			append(div2, t4);
			append(div4, t5);
			append(div4, div3);
			append(div3, t6);
			append(div3, t7);
		},
		p(ctx, dirty) {
			if (dirty & /*tower_info*/ 1 && t1_value !== (t1_value = /*tower_info*/ ctx[0].type + "")) set_data(t1, t1_value);
			if (dirty & /*dps*/ 2) set_data(t4, /*dps*/ ctx[1]);
			if (dirty & /*tower_info*/ 1 && t7_value !== (t7_value = /*tower_info*/ ctx[0].attack_speed + "")) set_data(t7, t7_value);
		},
		d(detaching) {
			if (detaching) detach(div4);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*tower_info*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*tower_info*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let selection;
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(2, gameModelInstance = m));
	let tower_info = undefined;
	let dps = 0;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 4) {
			 $$invalidate(3, selection = gameModelInstance.tower_defense.selection);
		}

		if ($$self.$$.dirty & /*selection, gameModelInstance*/ 12) {
			 if (selection) {
				$$invalidate(0, tower_info = gameModelInstance.tower_defense.getTower(selection.id));
			} else {
				$$invalidate(0, tower_info = undefined);
			}
		}

		if ($$self.$$.dirty & /*tower_info*/ 1) {
			 if (tower_info) {
				$$invalidate(1, dps = tower_info.damage * (1000 / tower_info.attack_speed));
			}
		}
	};

	return [tower_info, dps, gameModelInstance, selection];
}

class Tower_details extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Tower_details;
//# sourceMappingURL=tower_details.svelte.js.map
