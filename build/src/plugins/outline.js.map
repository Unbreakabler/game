{"version":3,"file":"outline.js","sources":["../../../../src/plugins/outline.ts"],"sourcesContent":["import GetFrag from './outline-frag';\n\nconst PostFXPipeline = Phaser.Renderer.WebGL.Pipelines.PostFXPipeline;\nconst GetValue = Phaser.Utils.Objects.GetValue;\nconst IntegerToRGB = Phaser.Display.Color.IntegerToRGB;\nconst Color = Phaser.Display.Color;\n\nlet Quality = 0.5;\nlet FragmentShader = GetFrag(Quality)\n\nexport class OutlinePipeline extends PostFXPipeline {\n\n  private _thickness = 5;\n  private _outlineColor = new Color(255, 255, 255);\n\n  constructor(game: Phaser.Game) {\n      super({\n          game: game,\n          renderTarget: true,\n          fragShader: FragmentShader,\n          name: 'outline',\n      });\n  }\n\n  resetFromJSON(o: any) {\n    this.setThickness(GetValue(o, 'thickness', 5));\n    this.setOutlineColor(GetValue(o, 'outlineColor', 0xffffff));\n    return this;\n  }\n\n  onPreRender() {\n      this.set1f('thickness', this._thickness);\n      if (this._thickness > 0) {\n          this.set3f('outlineColor', this._outlineColor.redGL, this._outlineColor.greenGL, this._outlineColor.blueGL);\n      }\n      this.set2f('texSize', this.renderer.width, this.renderer.height);\n  }\n\n  get thickness() {\n      return this._thickness;\n  }\n\n  set thickness(value) {\n      this._thickness = value;\n  }\n\n  setThickness(value: number) {\n      this.thickness = value;\n      return this;\n  }\n\n  get outlineColor() {\n      return this._outlineColor;\n  }\n\n  set outlineColor(value) {\n    let color_object = value as Phaser.Types.Display.InputColorObject\n      if (typeof (value) === 'number') {\n        color_object = IntegerToRGB(value);\n      }\n      this._outlineColor.setFromRGB(color_object);\n  }\n\n  setOutlineColor(value: Phaser.Display.Color) {\n      this.outlineColor = value;\n      return this;\n  }\n\n  static setQuality(quality: number) {\n      Quality = quality;\n      FragmentShader = GetFrag(quality);\n  }\n\n  static getQuality() {\n      return Quality;\n  }\n}"],"names":[],"mappings":";;AAEA,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,cAAc,CAAC;AACtE,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;AAC/C,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC;AACvD,MAAM,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;AAEnC,IAAI,OAAO,GAAG,GAAG,CAAC;AAClB,IAAI,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,CAAA;MAExB,eAAgB,SAAQ,cAAc;IAKjD,YAAY,IAAiB;QACzB,KAAK,CAAC;YACF,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,cAAc;YAC1B,IAAI,EAAE,SAAS;SAClB,CAAC,CAAC;QATC,eAAU,GAAG,CAAC,CAAC;QACf,kBAAa,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;KAShD;IAED,aAAa,CAAC,CAAM;QAClB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC5D,OAAO,IAAI,CAAC;KACb;IAED,WAAW;QACP,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACzC,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE;YACrB,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;SAC/G;QACD,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACpE;IAED,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;IAED,IAAI,SAAS,CAAC,KAAK;QACf,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;KAC3B;IAED,YAAY,CAAC,KAAa;QACtB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,OAAO,IAAI,CAAC;KACf;IAED,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;IAED,IAAI,YAAY,CAAC,KAAK;QACpB,IAAI,YAAY,GAAG,KAA8C,CAAA;QAC/D,IAAI,QAAQ,KAAK,CAAC,KAAK,QAAQ,EAAE;YAC/B,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;SACpC;QACD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;KAC/C;IAED,eAAe,CAAC,KAA2B;QACvC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,OAAO,IAAI,CAAC;KACf;IAED,OAAO,UAAU,CAAC,OAAe;QAC7B,OAAO,GAAG,OAAO,CAAC;QAClB,cAAc,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;KACrC;IAED,OAAO,UAAU;QACb,OAAO,OAAO,CAAC;KAClB;;;;;"}