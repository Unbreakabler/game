import { SvelteComponent, init, safe_not_equal, element, append, create_component, mount_component, add_flush_callback, transition_in, transition_out, destroy_component, attr, insert, group_outros, check_outros, detach, destroy_each, binding_callbacks, bind } from '../../node_modules/svelte/internal/index.mjs.js';
import Village_building from '../components/village_building.svelte.js';
import { gameModel } from '../gamelogic/gamemodel.js';

/* src/app/village.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1vzadf8-style";
	style.textContent = ".building-container.svelte-1vzadf8{justify-content:space-around;align-items:center;display:flex;flex:1;flex-flow:row wrap}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (13:2) {#each buildings as building}
function create_each_block(ctx) {
	let villagebuilding;
	let updating_selected;
	let current;

	function villagebuilding_selected_binding(value) {
		/*villagebuilding_selected_binding*/ ctx[3].call(null, value);
	}

	let villagebuilding_props = { building: /*building*/ ctx[4] };

	if (/*selected*/ ctx[0] !== void 0) {
		villagebuilding_props.selected = /*selected*/ ctx[0];
	}

	villagebuilding = new Village_building({ props: villagebuilding_props });
	binding_callbacks.push(() => bind(villagebuilding, "selected", villagebuilding_selected_binding));

	return {
		c() {
			create_component(villagebuilding.$$.fragment);
		},
		m(target, anchor) {
			mount_component(villagebuilding, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const villagebuilding_changes = {};
			if (dirty & /*buildings*/ 2) villagebuilding_changes.building = /*building*/ ctx[4];

			if (!updating_selected && dirty & /*selected*/ 1) {
				updating_selected = true;
				villagebuilding_changes.selected = /*selected*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			villagebuilding.$set(villagebuilding_changes);
		},
		i(local) {
			if (current) return;
			transition_in(villagebuilding.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(villagebuilding.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(villagebuilding, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let each_value = /*buildings*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "building-container svelte-1vzadf8");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*buildings, selected*/ 3) {
				each_value = /*buildings*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(2, gameModelInstance = m));
	let buildings;
	let { selected } = $$props;

	function villagebuilding_selected_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	$$self.$$set = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 4) {
			 $$invalidate(1, buildings = Array.from(gameModelInstance.village_buildings.values()));
		}
	};

	return [selected, buildings, gameModelInstance, villagebuilding_selected_binding];
}

class Village extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1vzadf8-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { selected: 0 });
	}
}

export default Village;
//# sourceMappingURL=village.svelte.js.map
