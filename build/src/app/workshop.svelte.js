import { SvelteComponent, init, safe_not_equal, element, append, text, space, attr, insert, listen, set_data, detach, run_all, noop, destroy_each } from '../../node_modules/svelte/internal/index.mjs.js';
import v4 from '../../node_modules/uuid/dist/esm-browser/v4.js';

/* src/app/workshop.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1a59st9-style";
	style.textContent = ".merge-container.svelte-1a59st9{user-select:none;display:grid;grid-template-columns:repeat(auto-fill, minmax(50px, 1fr));grid-auto-rows:50px;gap:20px}.item.svelte-1a59st9{cursor:move;border:1px solid red}span.svelte-1a59st9{pointer-events:none}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i][0];
	child_ctx[9] = list[i][1];
	return child_ctx;
}

// (41:4) {#each Object.entries(item_map) as [id, item]}
function create_each_block(ctx) {
	let div;
	let span;
	let t0_value = /*item*/ ctx[9].type + "";
	let t0;
	let t1;
	let t2_value = /*item*/ ctx[9].tier + "";
	let t2;
	let t3;
	let div_id_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = text(" - ");
			t2 = text(t2_value);
			t3 = space();
			attr(span, "class", "svelte-1a59st9");
			attr(div, "id", div_id_value = /*id*/ ctx[8]);
			attr(div, "class", "item svelte-1a59st9");
			attr(div, "draggable", "true");
			attr(div, "ondragover", "return false");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			append(span, t0);
			append(span, t1);
			append(span, t2);
			append(div, t3);

			if (!mounted) {
				dispose = [
					listen(div, "dragstart", /*dragStart*/ ctx[1]),
					listen(div, "dragend", /*dragEnd*/ ctx[4]),
					listen(div, "dragenter", /*dragEnter*/ ctx[2]),
					listen(div, "dragleave", /*dragLeave*/ ctx[3]),
					listen(div, "drop", /*dragDrop*/ ctx[5])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*item_map*/ 1 && t0_value !== (t0_value = /*item*/ ctx[9].type + "")) set_data(t0, t0_value);
			if (dirty & /*item_map*/ 1 && t2_value !== (t2_value = /*item*/ ctx[9].tier + "")) set_data(t2, t2_value);

			if (dirty & /*item_map*/ 1 && div_id_value !== (div_id_value = /*id*/ ctx[8])) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let each_value = Object.entries(/*item_map*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "merge-container svelte-1a59st9");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, item_map, dragStart, dragEnd, dragEnter, dragLeave, dragDrop*/ 63) {
				each_value = Object.entries(/*item_map*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const item_map = {};

	for (let i = 0; i < 100; i++) {
		let id = v4();
		item_map[id] = { id, type: "dirt", tier: 0 };
	}

	let dragging = null;
	let over = null;

	const dragStart = e => {
		const element_id = e.target?.getAttribute("id");
		dragging = item_map[element_id];
	};

	const dragEnter = e => {
		const element_id = e.target?.getAttribute("id");
		over = item_map[element_id];
	};

	const dragLeave = e => {
		over = null;
	};

	const dragEnd = e => {
		dragging = null;
		over = null;
	};

	const dragDrop = e => {
		e.preventDefault();

		// if dragging and over are combinable, combine them.
		// add the new combined element to the item_map, remove the old items.
		if (dragging && over && dragging.type === over.type && dragging.tier === over.tier) {
			delete item_map[dragging.id];
			delete item_map[over.id];
			let id = v4();

			// TODO(jon): Items should keep their order in the list, slots should s
			$$invalidate(
				0,
				item_map[id] = {
					id,
					tier: dragging.tier + 1,
					type: dragging.type
				},
				item_map
			);
		}
	};

	return [item_map, dragStart, dragEnter, dragLeave, dragEnd, dragDrop];
}

class Workshop extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1a59st9-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Workshop;
//# sourceMappingURL=workshop.svelte.js.map
