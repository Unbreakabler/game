{"version":3,"file":"enemy_wave_generator.js","sources":["../../../../../src/gamelogic/td/enemy_wave_generator.ts"],"sourcesContent":["// TODO(jon): FIX THIS\n// Loading module from “http://localhost:8000/public/build/_virtual/__node-resolve:empty.js_commonjs-proxy”\n// was blocked because of a disallowed MIME type (“application/octet-stream”).\n\n// import seedrandom from 'seedrandom'\n\n// const DEFAULT_SEED = 'babies'\n// // set `Math.random()` to be a PRNG seeded with DEFAULT_SEED\n// seedrandom(DEFAULT_SEED, {global: true });\n\nexport type EnemyType = 'green_knight'\nexport type ModifierId = EnemyMovementModifierIds | EnemySizeModifierIds | EnemyGroupModifierIds\n\nexport interface EnemyModifier {\n  id: ModifierId,\n  name: string,\n  mod_type: string,\n  mod_tier: integer,\n  stat_multipliers?: {\n    health_points?: number,\n    movement_speed?: number,\n    group_size?: number,\n  }\n  visual_modifiers?: {\n    width?: number,\n    height?: number,\n  },\n  difficulty_multiplier: number;\n}\n\nexport const ENEMY_MODIFIERS: EnemyModifierLibrary = {\n  'size_0': {\n    id: 'size_0',\n    name: 'Huge',\n    mod_type: 'size',\n    mod_tier: 0,\n    stat_multipliers: {\n      health_points: 1.25,\n    },\n    visual_modifiers: {\n      width: 1.5,\n      height: 1.5,\n    },\n    difficulty_multiplier: 1.5,\n  },\n  'group_0': {\n    id: 'group_0',\n    name: 'Mob',\n    mod_type: 'group',\n    mod_tier: 0,\n    stat_multipliers: {\n      group_size: 1.25,\n    },\n    difficulty_multiplier: 2,\n  },\n  'movement_0': {\n    id: 'movement_0',\n    name: 'Accelerated',\n    mod_type: 'movement',\n    mod_tier: 0,\n    stat_multipliers: {\n      movement_speed: 1.5,\n    },\n    difficulty_multiplier: 2, \n  },\n}\n\nconst ENEMY_TIER_MODIFIERS_WEIGHTS: ModList = {\n  green_knight: {\n    0: [\n      { id: 'size_0', weight: 1000 },\n      { id: 'group_0', weight: 1000 },\n      { id: 'movement_0', weight: 1000 },\n    ]\n  }\n}\n\ntype EnemyModifierLibrary = {\n  [mod_id in ModifierId]?: EnemyModifier\n}\n\ntype ModTier = 0 | 1 | 2\n\ntype ModList = {\n  [enemy_type in EnemyType]: {\n    [tier in ModTier]?: WeightedMod[]\n  }\n}\n\ninterface WeightedMod {\n  id: string,\n  weight: integer,\n}\n\ntype EnemySizeModifierIds = 'size_0'\ntype EnemyGroupModifierIds = 'group_0'\ntype EnemyMovementModifierIds = 'movement_0'\n\n/**\n * Takes a list of objects with weights and selects a random object from the weighted list.\n * TODO generic type with weight property?\n * @param items object containting a number \"weight\" field on each object\n * @returns items[i]\n */\nfunction weightedRandom<T>(items: T[], pop?: boolean): T {\n  let i;\n\n  let weights: any[] = []\n\n  for (i = 0; i < items.length; i++) {\n    if (typeof (items[i] as any).weight !== undefined) {\n      weights[i] = (items[i] as any).weight + (weights[i - 1] || 0);\n    }\n  }\n  \n  const random = Math.random() * weights[weights.length - 1];\n  \n  for (i = 0; i < weights.length; i++) {\n    if (weights[i] > random) break;\n  }\n  const ret_val = items.splice(i, 1)\n  return ret_val[0];\n}\n\nexport interface EnemyWave { \n  wave_type: string, \n  enemy_type: EnemyType, \n  modifier_ids: string[],\n  mob_count: integer,\n  mob_difficulty: number,\n  wave_difficulty: number,\n  enemy_spawn_delta: number,\n}\n\n\n/**\n * Design thoughts:\n * \n * - Do we want multiple types of enemies in a single wave? GOING WITH NO CURRENTLY\n * Pros:\n * - More unique wave combinations\n * - More interesting wave mechanics. You'll have fast and slow creeps. Large groups of weak mobs, and strong single mobs.\n * \n * Cons:\n * - Harder to visually and mentally parse the enemy wave if it's composed of many different enemy types.\n * \n * Algorithm:\n * 1. Select \"wave type\" (normal, magic, rare)\n * 2. Calculate max individual mob difficulty, 10% of max for normal, 30% for magic, 50%-100% for rare.\n * 3. Select modifiers at random until difficulty threshold is reach for individual mob\n * 4. apply modifiers to difficulty, add mobs until wave difficulty reaches max_difficulty\n */\nexport const generateWave = (max_difficulty: number): EnemyWave => {\n  const { wave_type, max_modifiers } = chooseWaveType(max_difficulty);\n\n  const max_mob_difficulty = calculateMaxMobDifficulty(wave_type, max_difficulty);\n\n  const { enemy_type, enemy_type_difficulty } = chooseEnemyType(max_mob_difficulty);\n\n  const { modifiers, modifier_ids, mob_with_modifier_difficulty } = chooseEnemyModifiers(enemy_type, enemy_type_difficulty, max_mob_difficulty, max_modifiers);\n\n  const { mob_count, mob_difficulty, enemy_spawn_delta } = generateEnemyList(mob_with_modifier_difficulty, modifiers, max_difficulty);\n\n  const wave_difficulty = mob_count * mob_difficulty\n\n  return { wave_type, enemy_type, modifier_ids, mob_count, mob_difficulty, wave_difficulty, enemy_spawn_delta}\n}\n\nconst chooseWaveType = (max_difficulty: number) => {\n  const wave_types = [\n    { wave_type: 'normal', max_modifiers: 1, weight: 1000 },\n  ]\n  if (max_difficulty > 30) {\n    wave_types.push({ wave_type: 'magic', max_modifiers: 3, weight: 1000 })\n  }\n  if (max_difficulty > 60) {\n    wave_types.push({ wave_type: 'rare', max_modifiers: 6, weight: 1000 })\n  }\n  const choice = weightedRandom(wave_types)\n  return { wave_type: choice.wave_type, max_modifiers: choice.max_modifiers }\n}\n\nconst calculateMaxMobDifficulty = (wave_type: string, max_difficulty: number) => {\n  let divisor = 10;\n  if (wave_type === 'magic') divisor = 4\n  if (wave_type === 'rare') divisor = 2\n  return Math.floor(max_difficulty/divisor)\n}\n\n /** \n  * Enemy Type:\n  * An emeny type is the base class of an enemy; Think a goblin, or skeleton from any basic arpg.\n  * Our initial games enemy type is \"green_knight\".\n  */\nconst chooseEnemyType = (max_difficulty: number): { enemy_type: EnemyType, enemy_type_difficulty: integer } => {\n  /* \n  - Different enemy types are gated behind a minimum difficulty number. \n    Think of a skeleton king that spawns as a boss at first at some threshold, and then a normal mob later in the game.\n  - Even at very high difficulties, the most basic enemy type can be selected. It will then have mods added to match the difficulty of the level.\n  - Certain enemy types are more likely to spawn in certain difficulty ranges. Think of Act 1/2/3/4 enemies are exclusive to their act, and then late game all enemies appear in \"maps\".\n  */\n\n  const enemy_type: EnemyType = 'green_knight'\n  const enemy_type_difficulty = 1;\n\n  return { enemy_type, enemy_type_difficulty};\n}\n\n/**\n * Enemy Modifiers:\n * \n * IMPLEMENTED:\n * - \n * \n * CAN BE IMPLEMENTED:\n * \n * Size/HP modifiers:\n * - Colossal (5x hp, size, diff, exp)\n * - Gargantuan (4x hp, size, diff, exp)\n * - Enormonous (3x hp, size, diff, exp)\n * - Giant (2x hp, size, diff, exp)\n * - Massive (1.5x hp, size, diff, exp)\n * \n * Group size modifiers:\n * - Swarm (6x group size, diff, exp)\n * - Horde (5x group size, diff, exp)\n * - Multitude (4x group size, diff, exp)\n * - Throng (3x group size, diff, exp)\n * - Mob (2x group size, diff, exp)\n * \n * Movement speed modifiers:\n * - Turbo ( 2.5x movement, diff, exp )\n * - Nimble ( 2x movement, diff, exp )\n * - Accelerated ( 1.5x movement, diff, exp )\n * - Lagging (0.9x movement, diff, exp)\n * - Lumbering (0.8x movement, diff, exp)\n * - Plodding (0.7x movement, diff, exp)\n * - Stiff (0.6x movement, diff, exp)\n * - Labored (0.5x movement, diff, exp)\n * \n *  NOT YET IMPLEMENTALABLE:\n * \n * Misc modifiers:\n * - Health Linked (4x group size, 2x diff, exp; all enemies spawn quickly, they all share damage equally distributed)\n * - \n * \n * Resistance modifiers:\n * - Resistant (fire/cold/lightning)\n *    - Fire (burning dmg) - Reduces burning damage taken by 25%, 1.5x diff, exp\n *    - Cold (slow) - Reduces slowing effect by 25%, 1.5x diff, exp\n *    - Lightning (crit chance/damage) - Reduces critical damage taken from critical hits by 25%, 1.5x diff, exp\n * \n * - Fragile (fire/cold/lightning)\n *    - Fire - Incraeses burning damage taken by 25%, 0.9x diff, exp\n *    - Cold - Increases slowing effect by X%, 0.9x diff, exp\n *    - Lightning - Increase cirtical damage taken from critical hits by X%, 0.9x diff, exp\n * \n * - Fragility and Resistance Tiers:\n *    - Significant\n *    - Substantial\n *    - Ample\n *    - Minimal\n *    - Trivial\n */\nconst chooseEnemyModifiers = (enemy_type: EnemyType, enemy_type_difficulty: number, max_mob_difficulty: number, max_mods: number) => {\n\n  const modifiers: EnemyModifier[] = []\n  let mob_with_modifier_difficulty = enemy_type_difficulty;\n\n  const modifier_pool = getAvailableModifiers(enemy_type);\n\n  // console.log('mob_with_modifier_difficulty', mob_with_modifier_difficulty, max_mob_difficulty)\n  while (mob_with_modifier_difficulty < max_mob_difficulty && modifier_pool.length) {\n    const selected_mod_weight = weightedRandom(modifier_pool, true);\n    // console.log('selected_mod_weight', selected_mod_weight, modifier_pool)\n    const selected_mod = ENEMY_MODIFIERS[selected_mod_weight.id as ModifierId]\n    if (selected_mod) {\n      let difficulty_with_modifier = mob_with_modifier_difficulty * selected_mod.difficulty_multiplier\n      if (difficulty_with_modifier > max_mob_difficulty) break;\n      mob_with_modifier_difficulty = difficulty_with_modifier\n      modifiers.push(selected_mod);\n      if (modifiers.length >= max_mods) break;\n    }\n  }\n\n  const modifier_ids = modifiers.map(mod => mod.id)\n  return { modifiers, modifier_ids, mob_with_modifier_difficulty}\n}\n\n/**\n * - Enemy types are divided into \"tiers\", starting at tier 0, incrementing as required.\n * - Enemy modifiers are divide into \"tiers\", starting at tier 0, incrementing as required in each category.\n * - Each \"tier\" of enemy types has an associated list enemy modifiers tiers and their \"unlock\" level.\n * \n * @param enemy_type \n * @param difficulty \n * @returns \n */\nconst getAvailableModifiers = (enemy_type: EnemyType) => {\n  const enemy_tier = getEnemyTypeTier(enemy_type);\n  return getEnemyTierModifiers(enemy_type, enemy_tier);\n}\n\n/**\n * Enemy tier is currently determined by type alone.\n * There will likely be additional tiers for each tier depending on difficulty.\n * eg: after difficulty 1_000_000 green_knight will always be a tier 1 unit or something similar.\n * @param enemy_type \n * @returns \n */\nconst getEnemyTypeTier = (enemy_type: EnemyType): ModTier => {\n  if (enemy_type === 'green_knight') return 0;\n  return 0;\n}\n\n/**\n * Desclenatingly iterate through the enemy tiers , adding add modifiers and their weights to the return result\n * @param enemy_type \n * @param tier \n * @returns \n */\nconst getEnemyTierModifiers = (enemy_type: EnemyType, tier: ModTier) => {\n  let modifiers: WeightedMod[] = []\n  while (tier >= 0) {\n    let weighted_mod_ids = ENEMY_TIER_MODIFIERS_WEIGHTS[enemy_type][tier]\n    if (weighted_mod_ids && weighted_mod_ids.length) modifiers = modifiers.concat(weighted_mod_ids)\n    tier--\n  }\n  return modifiers;\n}\n\n\nconst generateEnemyList = (mob_with_mods_difficulty: number, \n                           modifiers: EnemyModifier[],\n                           max_difficulty: number\n): { mob_count: number, mob_difficulty: number, enemy_spawn_delta: number } => {\n  \n  // Iterate through modifiers, if there are any \"group\" modifiers, remove the difficulty form the mob difficulty\n  // and increase the mob_count\n  \n  let mob_difficulty = mob_with_mods_difficulty;\n\n  // Instead of a spawn delta, a time between enemy spawns, if we used a total_wave_time, we could increase\n  // difficulty by increasing mob count, as it would always increase density of the wave.\n  let default_wave_time = 10_000; // every wave spawns over 10 seconds by default. ( can have mods that reduce wave time?)\n\n  // Multiply the mob count by any \"group\" stat modifiers which increase mob count.\n  // this could happen in the wave manager instead;\n  modifiers.forEach(mod => {\n    if (mod.mod_type === 'group') {\n      mob_difficulty /= mod.difficulty_multiplier;\n      if (mod.stat_multipliers?.group_size) {\n        default_wave_time /= mod.stat_multipliers.group_size\n      }\n    }\n  })\n\n  const mob_count = Math.floor(max_difficulty/mob_difficulty)\n\n  const enemy_spawn_delta = default_wave_time / mob_count\n\n  return { mob_count, mob_difficulty, enemy_spawn_delta } \n}\n\n\n"],"names":[],"mappings":"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"}