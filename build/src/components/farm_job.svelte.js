import { SvelteComponent, init, safe_not_equal, element, append, create_component, space, text, attr, insert, mount_component, listen, set_data, transition_in, transition_out, detach, destroy_component } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import { formatNumber } from '../gamelogic/util/utils.js';
import Progress_bar from './progress_bar.svelte.js';

/* src/components/farm_job.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-7f2fy5-style";
	style.textContent = "row.svelte-7f2fy5{display:flex}div.svelte-7f2fy5{flex:1}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let row;
	let div0;
	let progressbar;
	let t0;
	let div1;
	let t1;
	let t2;
	let div2;
	let t3_value = formatNumber(/*current_income*/ ctx[4], 2) + "";
	let t3;
	let t4;
	let div3;
	let t5_value = formatNumber(/*total_exp_for_level*/ ctx[3] - /*current_exp*/ ctx[1], 2) + "";
	let t5;
	let t6;
	let div4;
	let t7;
	let current;
	let mounted;
	let dispose;

	progressbar = new Progress_bar({
			props: {
				current: /*current_exp*/ ctx[1],
				total: /*total_exp_for_level*/ ctx[3],
				name: /*job*/ ctx[0].display_name
			}
		});

	return {
		c() {
			row = element("row");
			div0 = element("div");
			create_component(progressbar.$$.fragment);
			t0 = space();
			div1 = element("div");
			t1 = text(/*current_level*/ ctx[5]);
			t2 = space();
			div2 = element("div");
			t3 = text(t3_value);
			t4 = space();
			div3 = element("div");
			t5 = text(t5_value);
			t6 = space();
			div4 = element("div");
			t7 = text(/*max_level_reached*/ ctx[2]);
			attr(div0, "class", "svelte-7f2fy5");
			attr(div1, "class", "svelte-7f2fy5");
			attr(div2, "class", "svelte-7f2fy5");
			attr(div3, "class", "svelte-7f2fy5");
			attr(div4, "class", "svelte-7f2fy5");
			attr(row, "class", "svelte-7f2fy5");
		},
		m(target, anchor) {
			insert(target, row, anchor);
			append(row, div0);
			mount_component(progressbar, div0, null);
			append(row, t0);
			append(row, div1);
			append(div1, t1);
			append(row, t2);
			append(row, div2);
			append(div2, t3);
			append(row, t4);
			append(row, div3);
			append(div3, t5);
			append(row, t6);
			append(row, div4);
			append(div4, t7);
			current = true;

			if (!mounted) {
				dispose = listen(row, "click", /*handleClick*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const progressbar_changes = {};
			if (dirty & /*current_exp*/ 2) progressbar_changes.current = /*current_exp*/ ctx[1];
			if (dirty & /*total_exp_for_level*/ 8) progressbar_changes.total = /*total_exp_for_level*/ ctx[3];
			if (dirty & /*job*/ 1) progressbar_changes.name = /*job*/ ctx[0].display_name;
			progressbar.$set(progressbar_changes);
			if (!current || dirty & /*current_level*/ 32) set_data(t1, /*current_level*/ ctx[5]);
			if ((!current || dirty & /*current_income*/ 16) && t3_value !== (t3_value = formatNumber(/*current_income*/ ctx[4], 2) + "")) set_data(t3, t3_value);
			if ((!current || dirty & /*total_exp_for_level, current_exp*/ 10) && t5_value !== (t5_value = formatNumber(/*total_exp_for_level*/ ctx[3] - /*current_exp*/ ctx[1], 2) + "")) set_data(t5, t5_value);
			if (!current || dirty & /*max_level_reached*/ 4) set_data(t7, /*max_level_reached*/ ctx[2]);
		},
		i(local) {
			if (current) return;
			transition_in(progressbar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(progressbar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(row);
			destroy_component(progressbar);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	
	let gameModelInstance;
	gameModel.subscribe(m => gameModelInstance = m);
	let { job } = $$props;
	let current_exp = 0;
	let max_level_reached = 0;
	let total_exp_for_level = 0;
	let current_income = 0;
	let current_level = 0;

	function handleClick() {
		gameModelInstance.setActiveFarmJob(job.getAchievableName());
	}

	$$self.$$set = $$props => {
		if ("job" in $$props) $$invalidate(0, job = $$props.job);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*job*/ 1) {
			 $$invalidate(5, current_level = job.level);
		}

		if ($$self.$$.dirty & /*job*/ 1) {
			 $$invalidate(1, current_exp = job.current_exp);
		}

		if ($$self.$$.dirty & /*job*/ 1) {
			 $$invalidate(2, max_level_reached = job.max_level);
		}

		if ($$self.$$.dirty & /*job*/ 1) {
			 $$invalidate(3, total_exp_for_level = job.getTotalExpToNextLevel());
		}

		if ($$self.$$.dirty & /*job*/ 1) {
			 $$invalidate(4, current_income = job.getCurrentIncome());
		}
	};

	return [
		job,
		current_exp,
		max_level_reached,
		total_exp_for_level,
		current_income,
		current_level,
		handleClick
	];
}

class Farm_job extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-7f2fy5-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { job: 0 });
	}
}

export default Farm_job;
//# sourceMappingURL=farm_job.svelte.js.map
