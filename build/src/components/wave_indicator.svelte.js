import { SvelteComponent, init, safe_not_equal, element, append, attr, insert, text, set_data, detach, destroy_each, space, set_style, noop } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import { ENEMY_MODIFIERS } from '../gamelogic/td/enemy_wave_generator.js';
import { EnemyType } from '../gamelogic/td/stats_base_enemies.js';

/* src/components/wave_indicator.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1vtls31-style";
	style.textContent = ".main.svelte-1vtls31{display:flex;flex-direction:column;overflow:hidden;width:200px}.indicator.svelte-1vtls31{flex:1;display:flex;flex-direction:column;overflow-y:scroll;overflow-x:hidden}.wave_type.svelte-1vtls31{display:flex}.wave.svelte-1vtls31{background:rgba(202, 202, 202, 0.521);padding:5px;margin:5px}.wave_normal.svelte-1vtls31{color:#fff}.wave_magic.svelte-1vtls31{color:blue}.wave_rare.svelte-1vtls31{color:yellow}.enemy.svelte-1vtls31{display:inline-block;width:20px;height:32px}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (24:4) {#if current_wave.modifier_ids.length}
function create_if_block_1(ctx) {
	let span;
	let each_value_2 = /*current_wave*/ ctx[1].modifier_ids;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "modifiers");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*getMod, current_wave*/ 10) {
				each_value_2 = /*current_wave*/ ctx[1].modifier_ids;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (26:8) {#each current_wave.modifier_ids as mod_id}
function create_each_block_2(ctx) {
	let t_value = /*getMod*/ ctx[3](/*mod_id*/ ctx[8])?.name + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*current_wave*/ 2 && t_value !== (t_value = /*getMod*/ ctx[3](/*mod_id*/ ctx[8])?.name + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (42:8) {#if wave.modifier_ids.length}
function create_if_block(ctx) {
	let span;
	let each_value_1 = /*wave*/ ctx[5].modifier_ids;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "modifiers");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*getMod, waves*/ 9) {
				each_value_1 = /*wave*/ ctx[5].modifier_ids;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (44:12) {#each wave.modifier_ids as mod_id}
function create_each_block_1(ctx) {
	let t_value = /*getMod*/ ctx[3](/*mod_id*/ ctx[8])?.name + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*waves*/ 1 && t_value !== (t_value = /*getMod*/ ctx[3](/*mod_id*/ ctx[8])?.name + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (37:4) {#each waves as wave}
function create_each_block(ctx) {
	let div3;
	let div1;
	let div0;
	let t0;
	let t1_value = /*wave*/ ctx[5].mob_count + "";
	let t1;
	let div1_class_value;
	let t2;
	let t3;
	let div2;
	let span;
	let t4;
	let t5_value = Math.floor(/*wave*/ ctx[5].wave_difficulty) + "";
	let t5;
	let t6;
	let if_block = /*wave*/ ctx[5].modifier_ids.length && create_if_block(ctx);

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = text(" x ");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			div2 = element("div");
			span = element("span");
			t4 = text("wave difficulty: ");
			t5 = text(t5_value);
			t6 = space();
			attr(div0, "class", "enemy svelte-1vtls31");
			set_style(div0, "background-image", "url(" + `static/${EnemyType[/*wave*/ ctx[5].enemy_type]}.png` + ")");
			attr(div1, "class", div1_class_value = "wave_type wave_" + /*wave*/ ctx[5].wave_type + " svelte-1vtls31");
			attr(span, "class", "modifiers");
			attr(div3, "class", "wave svelte-1vtls31");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, div0);
			append(div1, t0);
			append(div1, t1);
			append(div3, t2);
			if (if_block) if_block.m(div3, null);
			append(div3, t3);
			append(div3, div2);
			append(div2, span);
			append(span, t4);
			append(span, t5);
			append(div3, t6);
		},
		p(ctx, dirty) {
			if (dirty & /*waves*/ 1) {
				set_style(div0, "background-image", "url(" + `static/${EnemyType[/*wave*/ ctx[5].enemy_type]}.png` + ")");
			}

			if (dirty & /*waves*/ 1 && t1_value !== (t1_value = /*wave*/ ctx[5].mob_count + "")) set_data(t1, t1_value);

			if (dirty & /*waves*/ 1 && div1_class_value !== (div1_class_value = "wave_type wave_" + /*wave*/ ctx[5].wave_type + " svelte-1vtls31")) {
				attr(div1, "class", div1_class_value);
			}

			if (/*wave*/ ctx[5].modifier_ids.length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div3, t3);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*waves*/ 1 && t5_value !== (t5_value = Math.floor(/*wave*/ ctx[5].wave_difficulty) + "")) set_data(t5, t5_value);
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment(ctx) {
	let div5;
	let t0;
	let div3;
	let div1;
	let div0;
	let t1;
	let t2_value = /*current_wave*/ ctx[1].mob_count + "";
	let t2;
	let div1_class_value;
	let t3;
	let t4;
	let div2;
	let span;
	let t5;
	let t6_value = Math.floor(/*current_wave*/ ctx[1].wave_difficulty) + "";
	let t6;
	let t7;
	let div4;
	let if_block = /*current_wave*/ ctx[1].modifier_ids.length && create_if_block_1(ctx);
	let each_value = /*waves*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div5 = element("div");
			t0 = text("Current wave:\n  ");
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			t1 = text(" x ");
			t2 = text(t2_value);
			t3 = space();
			if (if_block) if_block.c();
			t4 = space();
			div2 = element("div");
			span = element("span");
			t5 = text("wave difficulty: ");
			t6 = text(t6_value);
			t7 = text("\n  Upcoming waves:\n  ");
			div4 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "enemy svelte-1vtls31");
			set_style(div0, "background-image", "url(" + /*current_enemy_image*/ ctx[2] + ")");
			attr(div1, "class", div1_class_value = "wave_type wave_" + /*current_wave*/ ctx[1].wave_type + " svelte-1vtls31");
			attr(span, "class", "modifiers");
			attr(div3, "class", "wave svelte-1vtls31");
			attr(div4, "class", "indicator svelte-1vtls31");
			attr(div5, "class", "main svelte-1vtls31");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, t0);
			append(div5, div3);
			append(div3, div1);
			append(div1, div0);
			append(div1, t1);
			append(div1, t2);
			append(div3, t3);
			if (if_block) if_block.m(div3, null);
			append(div3, t4);
			append(div3, div2);
			append(div2, span);
			append(span, t5);
			append(span, t6);
			append(div5, t7);
			append(div5, div4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div4, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*current_enemy_image*/ 4) {
				set_style(div0, "background-image", "url(" + /*current_enemy_image*/ ctx[2] + ")");
			}

			if (dirty & /*current_wave*/ 2 && t2_value !== (t2_value = /*current_wave*/ ctx[1].mob_count + "")) set_data(t2, t2_value);

			if (dirty & /*current_wave*/ 2 && div1_class_value !== (div1_class_value = "wave_type wave_" + /*current_wave*/ ctx[1].wave_type + " svelte-1vtls31")) {
				attr(div1, "class", div1_class_value);
			}

			if (/*current_wave*/ ctx[1].modifier_ids.length) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div3, t4);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*current_wave*/ 2 && t6_value !== (t6_value = Math.floor(/*current_wave*/ ctx[1].wave_difficulty) + "")) set_data(t6, t6_value);

			if (dirty & /*Math, waves, getMod, EnemyType*/ 9) {
				each_value = /*waves*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div4, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let waves;
	let current_wave;
	let current_enemy_image;
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(4, gameModelInstance = m));

	const getMod = mod_id => {
		return ENEMY_MODIFIERS[mod_id];
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(0, waves = [...gameModelInstance.tower_defense.waves]);
		}

		if ($$self.$$.dirty & /*waves*/ 1) {
			 if (waves) waves.splice(0, 1);
		}

		if ($$self.$$.dirty & /*gameModelInstance*/ 16) {
			 $$invalidate(1, current_wave = gameModelInstance.tower_defense.getCurrentWave());
		}

		if ($$self.$$.dirty & /*current_wave*/ 2) {
			 $$invalidate(2, current_enemy_image = `static/${EnemyType[current_wave.enemy_type]}.png`);
		}
	};

	return [waves, current_wave, current_enemy_image, getMod, gameModelInstance];
}

class Wave_indicator extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1vtls31-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Wave_indicator;
//# sourceMappingURL=wave_indicator.svelte.js.map
