{"version":3,"file":"td.js","sources":["../../../../src/scenes/td.ts"],"sourcesContent":["import \"phaser\";\n\nimport { GameModel, gameModel } from \"../gamelogic/gamemodel\";\n\nimport type Enemy from \"./entities/enemies/enemy\";\nimport type Bullet from \"./entities/tower_bullet\";\n\nimport GreenKnight from \"./entities/enemies/green_knight\";\nimport Turret from './entities/towers/turret';\nimport type { SelectionCursor, TowerType } from \"../gamelogic/td/tower_defense\";\n\ntype Selection = {\n  type: TowerType;\n  id: string;\n  cursor: SelectionCursor;\n} | null\n\nlet gameModelInstance: GameModel;\ngameModel.subscribe((m) => (gameModelInstance = m));\n\nexport default class TD extends Phaser.Scene {\n  public path!: Phaser.Curves.Path;\n  private nextEnemy = 0;\n  public enemies!: BetterGroup<Enemy>;\n  public selection: {\n      type: TowerType;\n      id: string;\n      cursor: SelectionCursor;\n  } | null = null\n  public selected_turret: Turret | null = null;\n\n  private slots: Array<string | null> = [];\n  public tower_map: Map<string, Turret> = new Map<string, Turret>();\n\n  public constructor() {\n    super({ key: \"td\", active: true });\n  }\n\n  public preload(): void {\n    this.load.image(\"basic\", \"static/shotgun.png\");\n    this.load.image(\"machine_gun\", \"static/machine_gun.png\");\n    this.load.image(\"small_bullet\", \"static/small_bullet.png\");\n    this.load.spritesheet(\"green-knight\", \"static/green_knight.png\", {\n      frameWidth: 329/16,\n      frameHeight: 30,\n    });\n  }\n\n  public create(): void {\n    this.generateAnimations();\n    this.drawPath();\n    this.setupEntities();\n    // this.setupModelSubscriptions();\n    this.setupInputHandlers();\n\n    this.newTurretManagement();\n  }\n\n  private generateAnimations() {\n    // Set up animations\n    this.anims.create({\n      key: 'green-knight-walking-down',\n      frames: this.anims.generateFrameNames('green-knight', {start: 0, end: 3}),\n      frameRate: 3,\n      repeat: -1\n    })\n    this.anims.create({\n      key: 'green-knight-walking-right',\n      frames: this.anims.generateFrameNames('green-knight', {start: 4, end: 7}),\n      frameRate: 3,\n      repeat: -1\n    })\n    this.anims.create({\n      key: 'green-knight-walking-left',\n      frames: this.anims.generateFrameNames('green-knight', {start: 8, end: 11}),\n      frameRate: 3,\n      repeat: -1\n    })\n    this.anims.create({\n      key: 'green-knight-walking-up',\n      frames: this.anims.generateFrameNames('green-knight', {start: 12, end: 15}),\n      frameRate: 3,\n      repeat: -1\n    })\n  }\n\n  private drawPath() {\n    const graphics = this.add.graphics();    \n    \n    // The path for the current level, the coorodinates should be stored as a list\n    // of tuples and be loaded on level start.\n    this.path = this.add.path(96, -32);\n    this.path.lineTo(96, 264);\n    this.path.lineTo(500, 264);\n    this.path.lineTo(500, 114);\n    this.path.lineTo(300, 114);\n    this.path.lineTo(300, 514);\n    this.path.lineTo(96, 514);\n    this.path.lineTo(96, 380);\n    this.path.lineTo(850, 380);\n\n    // This will be swapped out for tiles eventually but for now we'll draw a white line.\n    graphics.lineStyle(3, 0xffffff, 1);\n    this.path.draw(graphics);\n  }\n\n  private newTurretManagement() {\n    // Subscribe to model.tower_defense.slots\n    // For each id, generate a \"turret\" using the tower_info from tower_maps,\n    // This can happen on initial launch to replace turrets if is_placed is true;\n    // Store this list of tower_ids -> turret game objects in a hashmap in td.ts;\n    this.setupTurrets();\n\n    // Subscribe to model.tower_defense.selection\n    // When the selection changes from null -> Selection,\n    // set the selected tower by finding it in the hashmap by id.\n    // if it's not placed, allow it to be placed, otherwise \"highlight\" the turret.\n    this.setupSelection();\n  }\n\n  private setupTurrets() {\n    const unsubscribe_store = gameModel.subscribe((model) => {\n      model.tower_defense.slots.forEach((model_tower_id, index) => {\n        const phaser_slot_tower_id = this.slots[index]\n        if (model_tower_id && model_tower_id !== this.slots[index]) {\n          // tower was added to slot\n          const tower_info = model.tower_defense.getTower(model_tower_id)\n          if (tower_info) {\n            const new_turret = new Turret(\n              this,\n              model_tower_id, \n              tower_info.x,\n              tower_info.y,\n              tower_info.type,\n            )\n            if (tower_info.is_placed) {\n              this.add.existing(new_turret)\n              new_turret.place(tower_info.x, tower_info.y)\n            }\n            this.tower_map.set(model_tower_id, new_turret)\n          }\n        } else if (phaser_slot_tower_id && !model_tower_id) {\n          // slot was cleared from the bar, destroy tower\n          const tower_to_delete = this.tower_map.get(phaser_slot_tower_id)\n        }\n      })\n      this.slots = model.tower_defense.slots;\n    })\n    this.events.on(\"destroy\", function () {\n      unsubscribe_store();\n    });\n  }\n\n  private setupSelection() {\n    let cur_selection: Selection = null;\n    const unsubscribe_store = gameModel.subscribe((model) => {   \n      // get the turret by id, if the turret is placed, highlight it\n      // if the turret is not placed, get a new turret and put it on cursor\n      if (cur_selection !== model.tower_defense.selection) {\n        cur_selection = model.tower_defense.selection\n        const new_selection_tower_info = model.tower_defense.getTower(cur_selection?.id || '')\n        const active_selection_tower_info = model.tower_defense.getTower(this.selection?.id || '')\n        if (cur_selection && this.selection !== cur_selection) {\n\n          if (this.selected_turret) {\n            this.selected_turret.is_selected = false;\n          }\n\n          if (this.selection && active_selection_tower_info?.is_placed == false) {\n            if (this.selected_turret) {\n              this.selected_turret.setVisible(false);\n            }\n            this.selected_turret = null;\n            this.selection = null;\n          }\n          this.selection = cur_selection\n          if (new_selection_tower_info?.is_placed) {\n            console.log('SELECT PLACED TURRET')\n            // selecting tower already placed\n            this.selection.cursor = 'selected'\n            this.selected_turret = this.tower_map.get(this.selection.id) || null;\n            if (this.selected_turret) {\n              this.selected_turret.is_selected = true;\n            }\n          } else {\n            console.log('SELECT UNPLACED TURRET')\n            // selecting a tower that is not yet placed\n            this.selection.cursor = 'placement'\n            this.selected_turret = this.tower_map.get(this.selection.id) || null;\n            if (this.selected_turret) {\n              this.add.existing(this.selected_turret);\n              this.selected_turret.setVisible(false);\n            }\n          }\n        } else if (cur_selection && this.selection === cur_selection) {\n          // reselecting - i don't think this ever happens, you can only toggle selection currently.\n          console.log('RESELECT TURRET')\n        } else if (!cur_selection && this.selection && active_selection_tower_info?.is_placed == false) {\n          // deselecting unplaced turret\n          console.log('DESELECT UNPLACED TURRET')\n          if (this.selected_turret) {\n            this.selected_turret.is_selected = false;\n            this.selected_turret.setVisible(false);\n          }\n          this.selected_turret = null;\n          this.selection = null;\n        } else if (!cur_selection && this.selection && active_selection_tower_info?.is_placed) {\n          console.log('DESELECT PLACED TURRET')\n          if (this.selected_turret) {\n            this.selected_turret.is_selected = false;\n          }\n          this.selected_turret = null;\n          this.selection = null;\n        }\n      }\n    });\n    this.events.on(\"destroy\", function () {\n      unsubscribe_store();\n    });\n  }\n  \n\n  private setupEntities() {\n    // Add gameobject groups enemies, these manage interactions and collisions\n    this.enemies = this.add.group({ classType: GreenKnight, runChildUpdate: true }) as BetterGroup<Enemy>;\n  }\n\n  private setupInputHandlers() {\n    // Place turrets on click, this will be changed to be a drag/drop from a tower menu\n    this.input.on(\"pointerdown\", this.selectUnderCursor.bind(this));\n    this.input.on(\"pointerdown\", this.placeTurret.bind(this));\n    this.input.on('pointermove', this.testTurretPlacement.bind(this));\n  }\n\n  public update(time: number, delta: number): void {\n    // if its time for the next enemy\n    if (time > this.nextEnemy) {\n      const enemy = new GreenKnight(this);\n      this.enemies.add(enemy, true);\n      // place the enemy at the start of the path\n      enemy.startOnPath(this.path);\n      this.nextEnemy = time + 2000;\n    }\n\n    this.tower_map.forEach((tower, key) => {\n      if (tower.is_placed) {\n        tower.update(time, delta)\n      }\n    })\n  }\n\n  public testTurretPlacement(pointer: Phaser.Input.Pointer, game_objects_under_pointer: Phaser.GameObjects.GameObject[]) {\n    if (!this.selection || this.selection.cursor !== 'placement' || !this.selected_turret) return;\n    this.selected_turret.setVisible(true);\n    this.selected_turret.is_selected = true;\n    this.selected_turret.x = pointer.x;\n    this.selected_turret.y = pointer.y;\n  }\n\n  public placeTurret(pointer: Phaser.Input.Pointer, game_objects_under_pointer: Phaser.GameObjects.GameObject[]): boolean {\n    if (!this.selection || this.selection.cursor !== 'placement' || !this.selected_turret) return false;\n    const place_x = Math.floor(pointer.x);\n    const place_y = Math.floor(pointer.y);\n    \n    const t = this.selected_turret;\n    if (!t.place(place_x, place_y)) {\n      return false;\n    }\n    if (gameModelInstance.tower_defense.selection) {\n      gameModelInstance.tower_defense.placeTower(gameModelInstance.tower_defense.selection.id, place_x, place_y)\n    }\n    this.selection = null;\n    gameModelInstance.tower_defense.selection = null;\n    return true;\n  }\n\n  public selectUnderCursor(pointer: Phaser.Input.Pointer, game_objects_under_pointer: Phaser.GameObjects.GameObject[]) {\n    // broadcast game object out of phaser to game model\n    // in order to do this the game objects real state should be stored in svelte/js instead of phaser\n    // and then a \"selected\" flag or similar should be toggled by this method.\n    // This means creating and managing a player inventory of towers.\n  }\n\n  public damageEnemy(enemy: Enemy, bullet: Bullet): void {\n    // only if both enemy and bullet are alive\n    if (enemy.active === true && bullet.active === true) {\n      // we remove the bullet right away\n      bullet.destroy();\n\n      // decrease the enemy hp with BULLET_DAMAGE\n      enemy.receiveDamage(bullet.damage);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}