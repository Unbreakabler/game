{"version":3,"file":"gamemodel.js","sources":["../../../../src/gamelogic/gamemodel.ts"],"sourcesContent":["import { deserialize, Exclude, serialize, Transform, Type } from \"class-transformer\";\nimport { writable } from \"svelte/store\";\nimport { TowerDefense } from \"./td/tower_defense\";\nimport type { Achievable } from \"./village/achievable\";\nimport { FarmJob } from \"./village/farmjob\";\nimport { farmJobTransformer, get_default_farm_jobs } from \"./village/farmjobs\";\nimport { VillageBuilding } from \"./village/villagebuilding\";\nimport { get_default_village_buildings, villageBuildingTransformer } from \"./village/villagebuildings\";\n\nexport class Wallet {\n  public money: number = 0;\n  public constructor() {\n    this.money = 0;\n  }\n}\n\n/**\n * This class holds the data the game needs to function.\n * It will be accessible from anywhere in the game using svelte stores.\n */\nexport class GameModel {\n  public last_saved: number;\n\n  @Type(() => Wallet)\n  public wallet: Wallet;\n\n  @Type(() => FarmJob)\n  @Transform(farmJobTransformer, { toClassOnly: true })\n  public farm_jobs: Map<string, FarmJob> = new Map();\n\n  @Type(() => VillageBuilding)\n  @Transform(villageBuildingTransformer, { toClassOnly: true })\n  public village_buildings: Map<string, VillageBuilding> = new Map();\n\n  @Exclude()\n  public achievables: Map<string, Achievable> = new Map();\n  \n  @Type(() => TowerDefense)\n  public tower_defense: TowerDefense;\n\n  public constructor() {\n    //Create new empty GameModel\n    this.last_saved = Date.now();\n    this.wallet = new Wallet();\n    this.farm_jobs = get_default_farm_jobs();\n    this.village_buildings = get_default_village_buildings();\n    this.tower_defense = new TowerDefense();\n    this.reloadAchievables();\n  }\n\n  public reloadAchievables(): void {\n    this.achievables = new Map([...this.farm_jobs]);\n  }\n\n  public update(delta_t_s: number): void {\n    for (const [key, farm_job] of this.farm_jobs.entries()) {\n      farm_job.update(delta_t_s);\n      farm_job.earnIncome(this.wallet, delta_t_s);\n    }\n  }\n\n  public exportToSave(): string {\n    this.last_saved = Date.now();\n    return serialize(this);\n  }\n\n  public static loadFromSave(data: string): GameModel {\n    const model = deserialize(GameModel, data);\n    model.reloadAchievables();\n    return model;\n  }\n\n  public setActiveFarmJob(achievable_name: string): void {\n    for (const [key, farm_job] of this.farm_jobs.entries()) {\n      farm_job.active = false;\n    }\n    const job = this.farm_jobs.get(achievable_name);\n    if (!job) throw new Error(`Missing FarmJob ${achievable_name}`);\n    job.active = true;\n  }\n}\n\n/**\n * A writable store of the gameModel that can be accessed from other parts of the application.\n */\nexport const gameModel = writable(new GameModel());\n\n/**\n * A function that can be called anywhere to update the game model in the svelte store.\n * This will trigger the svelte components to re-evaluate and update their content.\n */\nexport function updateGameModel(): void {\n  gameModel.update((m) => (m = m));\n}\n"],"names":[],"mappings":";;;;;;;;;;;;MASa,MAAM;IAEjB;QADO,UAAK,GAAW,CAAC,CAAC;QAEvB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;KAChB;CACF;AAED;;;;MAIa,SAAS;IAoBpB;QAZO,cAAS,GAAyB,IAAI,GAAG,EAAE,CAAC;QAI5C,sBAAiB,GAAiC,IAAI,GAAG,EAAE,CAAC;QAG5D,gBAAW,GAA4B,IAAI,GAAG,EAAE,CAAC;;QAOtD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,qBAAqB,EAAE,CAAC;QACzC,IAAI,CAAC,iBAAiB,GAAG,6BAA6B,EAAE,CAAC;QACzD,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QACxC,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;IAEM,iBAAiB;QACtB,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;KACjD;IAEM,MAAM,CAAC,SAAiB;QAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;YACtD,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YAC3B,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;SAC7C;KACF;IAEM,YAAY;QACjB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC;KACxB;IAEM,OAAO,YAAY,CAAC,IAAY;QACrC,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC3C,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,OAAO,KAAK,CAAC;KACd;IAEM,gBAAgB,CAAC,eAAuB;QAC7C,KAAK,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE;YACtD,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC;SACzB;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAChD,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,eAAe,EAAE,CAAC,CAAC;QAChE,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;KACnB;CACF;AAxDC;IADC,IAAI,CAAC,MAAM,MAAM,CAAC;yCACG;AAItB;IAFC,IAAI,CAAC,MAAM,OAAO,CAAC;IACnB,SAAS,CAAC,kBAAkB,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;4CACF;AAInD;IAFC,IAAI,CAAC,MAAM,eAAe,CAAC;IAC3B,SAAS,CAAC,0BAA0B,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;oDACM;AAGnE;IADC,OAAO,EAAE;8CAC8C;AAGxD;IADC,IAAI,CAAC,MAAM,YAAY,CAAC;gDACU;AA4CrC;;;MAGa,SAAS,GAAG,QAAQ,CAAC,IAAI,SAAS,EAAE,EAAE;AAEnD;;;;SAIgB,eAAe;IAC7B,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC;;;;"}