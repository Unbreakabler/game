import { SvelteComponent, init, safe_not_equal, element, append, space, text, create_component, attr, null_to_empty, insert, mount_component, listen, set_data, transition_in, transition_out, detach, destroy_component, run_all } from '../../node_modules/svelte/internal/index.mjs.js';
import { gameModel } from '../gamelogic/gamemodel.js';
import { formatNumber } from '../gamelogic/util/utils.js';
import Progress_bar from './progress_bar.svelte.js';

/* src/components/mine.svelte generated by Svelte v3.32.1 */

function add_css() {
	var style = element("style");
	style.id = "svelte-l96dhw-style";
	style.textContent = ".container.svelte-l96dhw.svelte-l96dhw{background-color:grey;margin:5px;padding:10px;display:flex;flex-direction:column}row.svelte-l96dhw.svelte-l96dhw{display:flex}column.svelte-l96dhw.svelte-l96dhw{margin:0px 10px}button.svelte-l96dhw.svelte-l96dhw{width:15rem;color:#fff;display:flex;flex-direction:column}.affordable.svelte-l96dhw.svelte-l96dhw{background-color:#DE9B61;border:2px solid #BD7639}.affordable.svelte-l96dhw .cost.svelte-l96dhw{background-color:#98541A}.non-affordable.svelte-l96dhw.svelte-l96dhw{background-color:#7a7a7a;border:2px solid #c3c3c3}.non-affordable.svelte-l96dhw .cost.svelte-l96dhw{background-color:#414141}.mine-info.svelte-l96dhw.svelte-l96dhw{flex:1;align-items:flex-end}.purchase-info.svelte-l96dhw.svelte-l96dhw{flex:1}.dirt.svelte-l96dhw.svelte-l96dhw{background-image:url(\"static/ore.png\");background-size:contain;background-color:rgba(167, 68, 29, 0.966);background-blend-mode:multiply;width:4rem;height:4rem}.stone.svelte-l96dhw.svelte-l96dhw{background-image:url(\"static/ore.png\");background-size:contain;background-color:rgba(197, 197, 197, 0.966);background-blend-mode:multiply;width:4rem;height:4rem}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div4;
	let row1;
	let div0;
	let t0;
	let column;
	let row0;
	let t1_value = /*mine*/ ctx[0].display_name + "";
	let t1;
	let t2;
	let t3_value = /*mine*/ ctx[0].level + "";
	let t3;
	let t4;
	let t5_value = /*mine*/ ctx[0].production + "";
	let t5;
	let t6;
	let progressbar;
	let t7;
	let button;
	let div2;
	let div1;
	let t8;
	let t9_value = formatNumber(/*purchase_cost*/ ctx[1], 0) + "";
	let t9;
	let t10;
	let div3;
	let t11;
	let button_class_value;
	let current;
	let mounted;
	let dispose;

	progressbar = new Progress_bar({
			props: {
				current: /*mine*/ ctx[0].current_timer_ms,
				total: /*mine*/ ctx[0].mine_timer_ms,
				name: /*mine*/ ctx[0].getDisplayName()
			}
		});

	return {
		c() {
			div4 = element("div");
			row1 = element("row");
			div0 = element("div");
			t0 = space();
			column = element("column");
			row0 = element("row");
			t1 = text(t1_value);
			t2 = text(" - Lv. ");
			t3 = text(t3_value);
			t4 = text(" - Produces: ");
			t5 = text(t5_value);
			t6 = space();
			create_component(progressbar.$$.fragment);
			t7 = space();
			button = element("button");
			div2 = element("div");
			div1 = element("div");
			t8 = space();
			t9 = text(t9_value);
			t10 = space();
			div3 = element("div");
			t11 = text(/*button_text*/ ctx[2]);
			attr(div0, "class", "" + (null_to_empty(/*icon_class*/ ctx[4]) + " svelte-l96dhw"));
			attr(row0, "class", "svelte-l96dhw");
			attr(column, "class", "mine-info svelte-l96dhw");
			attr(div1, "class", "coin");
			attr(div2, "class", "cost svelte-l96dhw");
			attr(div3, "class", "purchase-info svelte-l96dhw");
			attr(button, "class", button_class_value = "" + (null_to_empty(/*button_class*/ ctx[3]) + " svelte-l96dhw"));
			attr(row1, "class", "svelte-l96dhw");
			attr(div4, "class", "container svelte-l96dhw");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, row1);
			append(row1, div0);
			append(row1, t0);
			append(row1, column);
			append(column, row0);
			append(row0, t1);
			append(row0, t2);
			append(row0, t3);
			append(row0, t4);
			append(row0, t5);
			append(column, t6);
			mount_component(progressbar, column, null);
			append(row1, t7);
			append(row1, button);
			append(button, div2);
			append(div2, div1);
			append(div2, t8);
			append(div2, t9);
			append(button, t10);
			append(button, div3);
			append(div3, t11);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*manuallyMine*/ ctx[5]),
					listen(button, "click", /*purchaseMine*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*mine*/ 1) && t1_value !== (t1_value = /*mine*/ ctx[0].display_name + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*mine*/ 1) && t3_value !== (t3_value = /*mine*/ ctx[0].level + "")) set_data(t3, t3_value);
			if ((!current || dirty & /*mine*/ 1) && t5_value !== (t5_value = /*mine*/ ctx[0].production + "")) set_data(t5, t5_value);
			const progressbar_changes = {};
			if (dirty & /*mine*/ 1) progressbar_changes.current = /*mine*/ ctx[0].current_timer_ms;
			if (dirty & /*mine*/ 1) progressbar_changes.total = /*mine*/ ctx[0].mine_timer_ms;
			if (dirty & /*mine*/ 1) progressbar_changes.name = /*mine*/ ctx[0].getDisplayName();
			progressbar.$set(progressbar_changes);
			if ((!current || dirty & /*purchase_cost*/ 2) && t9_value !== (t9_value = formatNumber(/*purchase_cost*/ ctx[1], 0) + "")) set_data(t9, t9_value);
			if (!current || dirty & /*button_text*/ 4) set_data(t11, /*button_text*/ ctx[2]);

			if (!current || dirty & /*button_class*/ 8 && button_class_value !== (button_class_value = "" + (null_to_empty(/*button_class*/ ctx[3]) + " svelte-l96dhw"))) {
				attr(button, "class", button_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(progressbar.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(progressbar.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_component(progressbar);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let is_active;
	let max_level_affordable;
	let purchase_amount;
	let purchase_cost;
	let button_text;
	let is_affordable;
	let button_class;
	
	
	let gameModelInstance;
	gameModel.subscribe(m => $$invalidate(8, gameModelInstance = m));
	let { mine } = $$props;
	let { purchase_quantity = 0 } = $$props;
	const icon_class = mine.short_name;

	const manuallyMine = () => {
		mine.manuallyMine();
	};

	const purchaseMine = () => {
		mine.requestLevelUp(gameModelInstance.wallet, purchase_amount);
	};

	$$self.$$set = $$props => {
		if ("mine" in $$props) $$invalidate(0, mine = $$props.mine);
		if ("purchase_quantity" in $$props) $$invalidate(7, purchase_quantity = $$props.purchase_quantity);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*mine*/ 1) {
			 $$invalidate(10, is_active = mine.active);
		}

		if ($$self.$$.dirty & /*mine, gameModelInstance*/ 257) {
			 $$invalidate(11, max_level_affordable = Math.max(mine.getMaxLevelAffordable(gameModelInstance.wallet.money), 1));
		}

		if ($$self.$$.dirty & /*purchase_quantity, max_level_affordable*/ 2176) {
			 $$invalidate(9, purchase_amount = Math.min(purchase_quantity, max_level_affordable));
		}

		if ($$self.$$.dirty & /*mine, purchase_amount*/ 513) {
			 $$invalidate(1, purchase_cost = mine.getTotalMoneyToLevel(purchase_amount));
		}

		if ($$self.$$.dirty & /*is_active, purchase_amount*/ 1536) {
			 $$invalidate(2, button_text = is_active
			? `Level Up x${purchase_amount}`
			: `Buy Lv. ${purchase_amount}`);
		}

		if ($$self.$$.dirty & /*gameModelInstance, purchase_cost*/ 258) {
			 $$invalidate(12, is_affordable = gameModelInstance.wallet.money >= purchase_cost);
		}

		if ($$self.$$.dirty & /*is_affordable*/ 4096) {
			 $$invalidate(3, button_class = is_affordable ? "affordable" : "non-affordable");
		}
	};

	return [
		mine,
		purchase_cost,
		button_text,
		button_class,
		icon_class,
		manuallyMine,
		purchaseMine,
		purchase_quantity,
		gameModelInstance,
		purchase_amount,
		is_active,
		max_level_affordable,
		is_affordable
	];
}

class Mine extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-l96dhw-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { mine: 0, purchase_quantity: 7 });
	}
}

export default Mine;
//# sourceMappingURL=mine.svelte.js.map
